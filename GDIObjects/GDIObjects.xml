<?xml version="1.0"?>
<doc>
  <assembly>
    <name>GDIObjects</name>
    <version>1.2.1.0</version>
    <fullname>GDIObjects, Version=1.2.1.0, Culture=neutral, PublicKeyToken=null</fullname>
  </assembly>
  <members>
    <member name="T:GDIObjects.EnumDocumentTypes">
      <summary>
 The Two types of code documents GDI+ Architect produces. 
 </summary>
 <remarks>
 PrintDocument is for  multiple pages of printed information. 
 It creates a class that inherits from  System.Drawing.Printing.PrintDocument and 
 contains code to draw documents page by page. 
 
 The graphics class produces code to create a custom graphics class document. 
 A graphics class document is a single class to which a graphics context can be 
 passed to draw upon a surface. 
 </remarks></member>
    <member name="F:GDIObjects.EnumDocumentTypes.ePrintDocument">
      <summary>The PrintDocument type of document.  Generates a PrintDocument which 
 can print over multiple pages and inherits from the Framework's 
 System.Drawing.Printing.PrintDocument class</summary>
    </member>
    <member name="F:GDIObjects.EnumDocumentTypes.eClass">
      <summary>Document style class.  Generates a class that can draw itself to 
 a System.Drawing.Graphics context.</summary>
    </member>
    <member name="T:GDIObjects.EnumDragHandles">
      <summary>
 Enumeration of handles for objects on the design surface.  Handles correspond to the 
 rectangular areas on the edge of objects that can be manipulated, or on paths, to the 
 points that can be moved.  In the latter case, ePointHandle represents this type of 
 handle. 
 </summary>
 <remarks>
 The values of this enumeration is significant for arrays that manipulate sets of handles. 
 The order starts from the Left most point and rotates around clockwise back on itself. 
 </remarks></member>
    <member name="F:GDIObjects.EnumDragHandles.eNone">
      <summary> No handle has been selected</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eLeft">
      <summary> The left side handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eTopLeft">
      <summary> The top left corner handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eTop">
      <summary> The top side handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eTopRight">
      <summary> The top right corner handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eRight">
      <summary> The right side handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eBottomRight">
      <summary> The bottom right corner handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eBottom">
      <summary> The bottom side handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.eBottomleft">
      <summary> The bottom left corner handle</summary>
    </member>
    <member name="F:GDIObjects.EnumDragHandles.ePointHandle">
      <summary> An arbitrary point handle has been selected.  This is used in graphics 
 paths which are manipulated by the points in the paths instead of by its bounding 
 corner handles</summary>
    </member>
    <member name="T:GDIObjects.EnumCodeTypes">
      <summary>
 The types of code that GDI+ Architect produces (VB and C#). 
 </summary>
    </member>
    <member name="F:GDIObjects.EnumCodeTypes.eVB">
      <summary>Code will be generated in Visual Basic</summary>
    </member>
    <member name="F:GDIObjects.EnumCodeTypes.eCSharp">
      <summary>Code will be generated in C#</summary>
    </member>
    <member name="T:GDIObjects.EnumDrawMode">
      <summary>
 EnumDrawMode is used to enumerate the reason objects are being rendered, and allows 
 objects that need to paint differently to different types of surfaces to customize 
 their painting.  For example, text objects draw borders at design time, but not at 
 print preview time. 
 </summary>
    </member>
    <member name="F:GDIObjects.EnumDrawMode.eNormal">
      <summary> Normal is drawing to the GDI+ Architect surface (a screen)</summary>
    </member>
    <member name="F:GDIObjects.EnumDrawMode.ePrinting">
      <summary> Printing is drawing to a PrintDocument.</summary>
    </member>
    <member name="F:GDIObjects.EnumDrawMode.eGraphicExport">
      <summary> Graphics Export is drawing to a Bitmap or other GDI+ graphic item being 
 exported</summary>
    </member>
    <member name="T:GDIObjects.EnumAlignMode">
      <summary>
 Enumeration of valid alignment modes.  When the user elects to align 
 an object they can align "normal" (to other selected objects), to the document's 
 margins or to the entire canvas. 
 </summary>
    </member>
    <member name="F:GDIObjects.EnumAlignMode.eNormal">
      <summary> Normal indicates alignment occurs to other selected objects</summary>
    </member>
    <member name="F:GDIObjects.EnumAlignMode.eMargins">
      <summary> eMargins indicates alignment occurs to margins </summary>
    </member>
    <member name="F:GDIObjects.EnumAlignMode.eCanvas">
      <summary> eCanvas indicates alignment occurs to the edges of the canvas </summary>
    </member>
    <member name="T:GDIObjects.EnumLinkType">
      <summary>
 The way a resource (texture image or image) will be referenced in the generated code. 
 </summary>
 <remarks>
 In the code generated by GDI+ Architect, images can be referenced by one of three 
 methods.  The user may indicate they plan to embed an image, refer to the image by an 
 absolute path, or refer to the image by a relative path.  This Enumeration is used 
 to denote which of the three options the user has selected. 
 </remarks></member>
    <member name="F:GDIObjects.EnumLinkType.Embedded">
      <summary>The final resource will be embedded in the solution</summary>
    </member>
    <member name="F:GDIObjects.EnumLinkType.AbsolutePath">
      <summary>The final resource will be specified as an absolute path to the resource</summary>
    </member>
    <member name="F:GDIObjects.EnumLinkType.RelativePath">
      <summary>The final resource will be specified as 
  a relative path from the BIN directory (runtime path)</summary>
    </member>
    <member name="T:GDIObjects.EnumScope">
      <summary>
 The valid scopes for objects in generated code. 
 </summary>
    </member>
    <member name="F:GDIObjects.EnumScope.Private">
      <summary> Private field scope</summary>
    </member>
    <member name="F:GDIObjects.EnumScope.Protected">
      <summary>Protected field scope</summary>
    </member>
    <member name="F:GDIObjects.EnumScope.FriendFamilyInternal">
      <summary>Friend (Internal) scope</summary>
    </member>
    <member name="F:GDIObjects.EnumScope.ProtectedFriendFamilyInternal">
      <summary>Protected Friend scope (available in project and to inheritors)</summary>
    </member>
    <member name="F:GDIObjects.EnumScope.Public">
      <summary>Public scope</summary>
    </member>
    <member name="T:GDIObjects.DocumentManager">
      <summary>
 Responsible for providing access to properties of the current document being worked with 
 in the GDIArchitect project.  Limits the access to the current document so that 
 only a small set of actions can be performed directly from the GDIObject project. 
 </summary>
    </member>
    <member name="F:GDIObjects.DocumentManager._CurrentDocument">
      <summary>
 A reference to the currently selected document in the UI portion of the project. 
 </summary>
    </member>
    <member name="P:GDIObjects.DocumentManager.MemberPrefix">
      <summary>
 Gets the member prefix (local field prefix) of the current document's export settings 
 </summary>
 <value>A string containing the member prefix</value></member>
    <member name="P:GDIObjects.DocumentManager.FieldPrefix">
      <summary>
 Gets the FieldPrefix in the current document's ExportSettings 
 </summary>
 <value>A string containing the field prefix</value></member>
    <member name="P:GDIObjects.DocumentManager.RootNameSpace">
      <summary>
 Gets the RootNamespace defined in the current document's export settings 
 </summary>
 <value>A string containing the root namespace</value></member>
    <member name="P:GDIObjects.DocumentManager.CurrentDocument">
      <summary>
 Sets the application wide current document. 
 </summary>
 <value>The GDIDocument to make the system wide current document.</value>
 <remarks>The WriteOnly style is used 
 to make the point clear that the GDIObject project should not access the 
 current document directly.  Instead, it should only consume those methods and properties 
 available through this class. 
 </remarks></member>
    <member name="P:GDIObjects.DocumentManager.HaveCurrentDocument">
      <summary>
 Returns a Boolean indicating if a current document exists or not. 
 </summary>
 <value>A Boolean indicating if there is a current document.</value></member>
    <member name="M:GDIObjects.DocumentManager.NameConflictExists(System.String)">
      <summary>
 Determines if a naming conflict exists for a suggested name. 
 </summary>
 <param name="proposedName">The proposed name to check</param>
 <returns>A Boolean indicating if a naming conflict exists</returns>
 <remarks>This exists for when the user explicitly sets a name in the property grid 
 and objects need to check if a name conflict exists.</remarks></member>
    <member name="T:GDIObjects.BaseExport">
      <summary>
 BaseExport is a set of common functionality used for exporting code for both 
 ''' the GDI+ Architect PrintClass and the GDI+ Architect GraphicsClass. 
 </summary>
 <remarks>The goal of this base class is to try to extrapolate the common properties 
 between these two export options into a single more manageable class. 
 </remarks></member>
    <member name="F:GDIObjects.BaseExport._Document">
      <summary>
 The GDIDocument being exported to code. 
 </summary>
    </member>
    <member name="F:GDIObjects.BaseExport._EmbedMethodNeeded">
      <summary>
 Whether a routine to retrieve embedded resources is required or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.BaseExport._AbsoluteMethodNeeded">
      <summary>
 Whether a routine to retrieve resources from an absolute path is required or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.BaseExport._RelativeMethodNeeded">
      <summary>
 Whether a routine to retrieve relative resources is needed or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.BaseExport._RotateMethodNeeded">
      <summary>
 Whether a routine to rotate resources is needed or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.BaseExport._Consolidated">
      <summary>
 A set of all consolidated objects. 
 Consolidated objects are used to avoid emitting unnecessary code. 
 </summary>
    </member>
    <member name="F:GDIObjects.BaseExport._ExportSettings">
      <summary>
 The current export settings.  See ExportSettings for more information. 
 </summary>
    </member>
    <member name="M:GDIObjects.BaseExport.Generate">
      <summary>
 Required for inheritors to implement. 
 Called to perform code generation. 
 </summary>
 <returns>A string containing all of the generated code in the appropriate language.</returns></member>
    <member name="M:GDIObjects.BaseExport.#ctor(GDIObjects.GDIDocument)">
      <summary>
 Constructor used when exporting an entire GDIDocument to code. 
 </summary>
 <param name="doc">The document to export</param></member>
    <member name="M:GDIObjects.BaseExport.#ctor(GDIObjects.GDIDocument,GDIObjects.GDIObjCol)">
      <summary>
 Constructor used to generate code for a set of selected objects. 
 </summary>
 <param name="doc">The GDIDocument containing the selected objects.</param>
 <param name="objects">The set of objects to export.</param></member>
    <member name="M:GDIObjects.BaseExport.getGenerator(System.IO.StringWriter)">
      <summary>
 Gets a CodeGenerator appropriate to the current language 
 </summary>
 <param name="sw">A string writer to write the code to.</param>
 <returns>An ICodeGenerator for either C# or VB.NET depending on ExportOption settings.</returns></member>
    <member name="M:GDIObjects.BaseExport.createTextHintAssignment">
      <summary>
 Creates a TextHint statement. 
 </summary>
 <returns>A CodeAssignStatement used to assign a TextHint to the graphics object</returns>
 <remarks>This creates the statement: ( g.TextRenderingHint = ... ) 
 </remarks></member>
    <member name="M:GDIObjects.BaseExport.createSmoothingModeAssignment">
      <summary>
 Creates a SmoothingMode assignment statement 
 </summary>
 <returns>A CodeAssignStatement used to assign the current graphic object's smoothing mode.</returns>
 <remarks>This returns the statement: ( g.SmoothingMode = ... ) 
 </remarks></member>
    <member name="M:GDIObjects.BaseExport.createConsolidatedObjects(GDIObjects.GDIObjCol)">
      <summary>
 Examine each GDIObject to be exported and checks which properties of the objects 
 can be consolidated. 
 </summary>
 <param name="objects">The set of objects being exported</param>
 <remarks>
 This overload is used when a specific set of objects are being exported rather 
 than the entire document. 
 </remarks></member>
    <member name="M:GDIObjects.BaseExport.createConsolidatedObjects">
      <summary>
 Examine each GDIObject to be exported and checks which properties of the objects 
 can be consolidated. 
 </summary>
 <remarks>This overload is intended for when an entire document is being exported. 
 </remarks></member>
    <member name="M:GDIObjects.BaseExport.checkRotation">
      <summary>
 Examines each object in the export set to see if one has been rotated. 
 </summary>
    </member>
    <member name="M:GDIObjects.BaseExport.checkRotation(GDIObjects.GDIObjCol)">
      <summary>
 Examines each GDIObject in a specific set of objects and checks whether 
 any have been rotated. 
 </summary>
 <param name="objCol">A collection of GDIObjects to check for rotation.</param></member>
    <member name="M:GDIObjects.BaseExport.checkImages(GDIObjects.GDIObjCol)">
      <summary>
 Determines which extra routines need to be embedded in the outgoing code to 
 handle image loading and rendering.   This overload is intended for when a subset 
 of objects are being exported. 
 </summary>
 <param name="objCol">The set of objects being exported.</param></member>
    <member name="M:GDIObjects.BaseExport.checkImages">
      <summary>
 Determines which extra routines need to be embedded in the outgoing code to 
 handle image loading and rendering.   This overload is intended for when an entire 
 document is being exported. 
 </summary>
    </member>
    <member name="M:GDIObjects.BaseExport.CreateRotateStart">
      <summary>
 Emits a method that begins the rotation of an object. 
 </summary>
 <returns>A method capable of beginning rotation.</returns></member>
    <member name="M:GDIObjects.BaseExport.CreateRotateEnd">
      <summary>
 Emits a method that ends the rotation of an object. 
 </summary>
 <returns>A method capable of ending rotation.</returns></member>
    <member name="M:GDIObjects.BaseExport.CreateRotateLocals(System.CodeDom.CodeTypeMemberCollection)">
      <summary>
 Emits Fields required to rotate an object on the surface. 
 </summary>
 <param name="declarations">Declarations section of the graphics object</param>
 <remarks>At this time, only the gContainer member is emitted. 
 </remarks></member>
    <member name="M:GDIObjects.BaseExport.CreateFromEmbedded">
      <summary>
 Emits a method capable of retrieving embedded resources. 
 </summary>
 <returns>A CodeMemberMethod object with the code to retrieve embedded resources.</returns></member>
    <member name="M:GDIObjects.BaseExport.CreateFromRelative">
      <summary>
 Emits a method capable of retrieving relative resources. 
 </summary>
 <returns>A CodeMemberMethod object with the code to retrieve relative resources.</returns></member>
    <member name="M:GDIObjects.BaseExport.CreateFromAbsolute">
      <summary>
 Emits a method capable of retrieving absolute resources. 
 </summary>
 <returns>A CodeMemberMethod object with the code to retrieve absolute resources.</returns></member>
    <member name="M:GDIObjects.BaseExport.CreateInitGraphics">
      <summary>
 Creates the InitializeGraphics method for outgoing code.  The InitializeGraphics 
 method is where GDI+ properties are assigned much in the same format as the 
 InitializeComponent method. 
 </summary>
 <returns>A CodeDOM.CodeMemberMethod to which other code pieces can be appended.</returns></member>
    <member name="M:GDIObjects.BaseExport.CreateInheritedDispose">
      <summary>
 Creates the inherited override dispose. 
 </summary>
 <returns>A codeDOM.CodeMemberMethod that overrides the default dispose constructor 
 to call the GDI+ Architect custom disposegraphics method in the flow of dispose.</returns></member>
    <member name="M:GDIObjects.BaseExport.CreateDisposeGraphics">
      <summary>
 Creates the DisposeGraphics section of the GDI+ Architect class file.  This allows 
 the class to custom dispose its created resources. 
 </summary>
 <returns>A CodeMemberMethod to which will be added 
 resources needing disposal.</returns></member>
    <member name="T:GDIObjects.ExportClass">
      <summary>
 Responsible for emitting a GDI+ Architect Graphics class from a document. 
 </summary>
 <remarks>
 GDIDocuments can be of two distinct types: PrintDocuments or GraphicsClass style 
 documents.  This class is responsible for generating the GraphicsClas style 
 export. 
 </remarks></member>
    <member name="M:GDIObjects.ExportClass.#ctor(GDIObjects.GDIDocument)">
      <summary>
 Constructs a new instance of the ExportClass. 
 </summary>
 <param name="doc">The GDIDocument being exported to code.</param></member>
    <member name="M:GDIObjects.ExportClass.Generate">
      <summary>
 Called to generate the graphics class code. 
 </summary>
 <returns>A string containing the generated code.</returns></member>
    <member name="M:GDIObjects.ExportClass.CreateCLASSDeclaration">
      <summary>
 Creates a code class to which all other code is added.  This is the actual class 
 that will be emitted (the Graphics class itself). 
 </summary>
 <returns>A CodeTypeDeclaration containing the class</returns></member>
    <member name="M:GDIObjects.ExportClass.CreateCLASSRenderGraphics">
      <summary>
 Creates the renderGraphics method. 
 </summary>
 <returns>a CodeMemberMethod containing the render graphics method.</returns></member>
    <member name="T:GDIObjects.ExportConsolidate">
      <summary>
 Responsible for handling consolidation scenarios. 
 </summary>
 <remarks>
 Consolidation is when a single declarationcan be created instead of multiple declarations, 
  thus creating less code.  For example, two objects on the surface may be filled 
 with a solid blue brush.  Instead of emitting this declaration twice, the user 
 has the option to consolidate these objects into a single brush declaration. 
 </remarks></member>
    <member name="T:GDIObjects.ExportConsolidate.ConsolidatedItem">
      <summary>
 A simple wrapper for consolidated objects.  Contains the common name that will be 
 emitted for consolidated items, an item which is valid as an emit target for the 
 consolidated set, and a matches count. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate.ConsolidatedItem.Name">
      <summary>
 Name that will be emitted for the set of consolidated items (Brush1, etc) 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate.ConsolidatedItem.item">
      <summary>
 A reference to one of the identical items in the consolidation set used to 
 generate code. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate.ConsolidatedItem.matches">
      <summary>
 Total number of matches. 
 </summary>
    </member>
    <member name="M:GDIObjects.ExportConsolidate.ConsolidatedItem.#ctor(System.Object,System.String)">
      <summary>
 Creates a new instance of a ConsolidatedItem. 
 </summary>
 <param name="oitem">A key object that is identical to all objects in that this item 
 will consolidate.</param>
 <param name="sname">The name that will be used when exporting to code for all 
 items in the set.</param></member>
    <member name="F:GDIObjects.ExportConsolidate._NextFillID">
      <summary>
  Next key to use for consolidated fills 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate._NextStrokeID">
      <summary>
 Next key to use for consolidated strokes 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate._NextFontID">
      <summary>
 Next key to use for consolidated Fonts 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate._NextFormatID">
      <summary>
 Next key to use for consolidated formats 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate._Fills">
      <summary>
 An arraylist containing common (consolidated) fills 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate._Strokes">
      <summary>
 An arraylist containing common (consolidated) stokes 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate._Fonts">
      <summary>
 An arraylist containing common (consolidated) fonts 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportConsolidate._Formats">
      <summary>
 An arraylist containing common (consolidated) string format objects. 
 String formats are used to render text to the drawing surface 
 </summary>
    </member>
    <member name="M:GDIObjects.ExportConsolidate.getColorAssignment(System.Drawing.Color)">
      <summary>
 Emits a color assignment statement for a specific color value. 
 </summary>
 <param name="val">the color to get a statement for.</param>
 <returns>A CodeExpression which describes the color assignment.</returns>
 <remarks>Notice this code attempts to use named colors first. 
 </remarks></member>
    <member name="M:GDIObjects.ExportConsolidate.emitFill(GDIObjects.ExportConsolidate.ConsolidatedItem,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated fill. 
 </summary>
 <param name="sharedFill">The fill shared by the various consolidated objects.</param>
 <param name="Declarations">Declarations section of the code class being created.</param>
 <param name="InitGraphics">InitGraphics section of the code class being created.</param>
 <param name="RenderGDI">The RenderGDI method of the code class being created.</param>
 <param name="DisposeGDI">The DisposeGDI section of the code class being created.</param>
 <param name="ExportSettings">The current export settings.</param>
 <remarks>Notice that the consolidated item is asked to emit itself. 
 </remarks></member>
    <member name="M:GDIObjects.ExportConsolidate.emitStroke(GDIObjects.ExportConsolidate.ConsolidatedItem,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated stroke. 
 </summary>
 <param name="sharedStroke">The stroke shared by the various consolidated objects.</param>
 <param name="Declarations">Declarations section of the code class being created.</param>
 <param name="InitGraphics">InitGraphics section of the code class being created.</param>
 <param name="RenderGDI">The RenderGDI method of the code class being created.</param>
 <param name="DisposeGDI">The DisposeGDI section of the code class being created.</param>
 <param name="ExportSettings">The current export settings.</param>
 <remarks>All of the "IF" statements below are used to determine if the stroke is using 
 default values.  If they are, these properties are not emitted explicitly. 
 </remarks></member>
    <member name="M:GDIObjects.ExportConsolidate.emitFormat(GDIObjects.ExportConsolidate.ConsolidatedItem,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated string format. 
 </summary>
 <param name="sharedFormat">The string format shared by the consolidated objects.</param>
 <param name="Declarations">Declarations section of the code class being created.</param>
 <param name="InitGraphics">InitGraphics section of the code class being created.</param>
 <param name="RenderGDI">The RenderGDI method of the code class being created.</param>
 <param name="DisposeGDI">The DisposeGDI section of the code class being created.</param>
 <param name="ExportSettings">The current export settings.</param></member>
    <member name="M:GDIObjects.ExportConsolidate.getFontInitializer(System.Drawing.Font,GDIObjects.ExportSettings)">
      <summary>
 Emits a statement that sets up a font. 
 </summary>
 <param name="fnt">The font to emit </param>
 <param name="exportSettings">Current export settings.</param>
 <returns>An expression that creates a font.</returns>
 <remarks>Notice that if the document is a print document,  some 
 conversion is performed based on the DPI in order to get a matching display output font. 
 </remarks></member>
    <member name="M:GDIObjects.ExportConsolidate.getFontDisposal(System.String)">
      <summary>
 Generates a font dispose statement. 
 </summary>
 <param name="fontdeclare">The name of the font created</param>
 <returns>An invocation that will dispose of the font.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.emitFont(GDIObjects.ExportConsolidate.ConsolidatedItem,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated font. 
 </summary>
 <param name="shareFormat">The font shared by the various consolidated objects.</param>
 <param name="Declarations">Declarations section of the code class being created.</param>
 <param name="InitGraphics">InitGraphics section of the code class being created.</param>
 <param name="RenderGDI">The RenderGDI method of the code class being created.</param>
 <param name="DisposeGDI">The DisposeGDI section of the code class being created.</param>
 <param name="ExportSettings">The current export settings.</param></member>
    <member name="M:GDIObjects.ExportConsolidate.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Begins the process of exporting all consolidated resources to declarations 
 </summary>
 <param name="Declarations">Declarations section of the code class being created.</param>
 <param name="InitGraphics">InitGraphics section of the code class being created.</param>
 <param name="RenderGDI">The RenderGDI method of the code class being created.</param>
 <param name="DisposeGDI">The DisposeGDI section of the code class being created.</param>
 <param name="ExportSettings">The current export settings.</param>
 <remarks>When this method is called, each arraylist of consolidated items is examined 
 for objects.  As objects are found, they are emitted. 
 </remarks></member>
    <member name="M:GDIObjects.ExportConsolidate.consolidateFill(GDIObjects.GDIFill)">
      <summary>
 Determines if a fill is in the consolidation set and adds the fill if it's not. 
 </summary>
 <param name="fillToCheck">The fill to check and add</param></member>
    <member name="M:GDIObjects.ExportConsolidate.addConsolidatedFill(GDIObjects.GDIFill)">
      <summary>
 Adds a fill to the set of consolidated fills. 
 </summary>
 <param name="fill">The fill to add to the consolidated set.</param></member>
    <member name="M:GDIObjects.ExportConsolidate.getFillName(GDIObjects.GDIFill)">
      <summary>
 Returns a name to use when rendering a fill to code.  This method checks if 
 the incoming fill is equal for exporting to one in the consolidation set and returns 
 the equivalent name if it is. 
 </summary>
 <param name="fillToCheck">The fill to check to see if it is consolidated</param>
 <returns>A string value containing the name of the fill to use instead of the original name, 
 or an empty string if no consolidation was found.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.hasFillMatch(GDIObjects.GDIFill)">
      <summary>
 Determines if a given fill has a match in the consolidated fill set. 
 </summary>
 <param name="fillToCheck">The fill to check for matches</param>
 <returns>A Boolean indicating whether an equivalent fill has already been added to the set.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.consolidateStroke(GDIObjects.GDIStroke)">
      <summary>
 Determines if a stroke is in the consolidated set or not.  If it is not, 
  adds it to the consolidated set. 
 </summary>
 <param name="strokeToCheck">The stroke to check for participation in the consolidation 
 set.</param></member>
    <member name="M:GDIObjects.ExportConsolidate.addConsolidatedStroke(GDIObjects.GDIStroke)">
      <summary>
 Adds as stroke to the consolidated set. 
 </summary>
 <param name="stroke">The stroke to add to the set</param></member>
    <member name="M:GDIObjects.ExportConsolidate.getStrokeName(GDIObjects.GDIStroke)">
      <summary>
 Returns the equivalent name to use when emitting this stroke or an empty string if no 
 equivalent is available. 
 </summary>
 <param name="strokeToCheck">The stroke to check for consolidation.</param>
 <returns>A string value containing the name of the stroke to use instead of the original name, 
 or an empty string if no consolidation was found.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.hasStrokeMatch(GDIObjects.GDIStroke)">
      <summary>
 Determine if a given stroke has an equivalent in the consolidation set. 
 </summary>
 <param name="strokeToCheck">The stroke to check for equivalents for</param>
 <returns>A Boolean indicating whether an equivalent stroke was found.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.consolidateFont(System.Drawing.Font)">
      <summary>
 Determines if a font is in the consolidation set and adds it if it is not. 
 </summary>
 <param name="fontToCheck">The font to check for consolidation</param></member>
    <member name="M:GDIObjects.ExportConsolidate.addConsolidatedFont(System.Drawing.Font)">
      <summary>
 Adds a font to the consolidated font set. 
 </summary>
 <param name="font">The font to add to the set</param></member>
    <member name="M:GDIObjects.ExportConsolidate.getFontName(System.Drawing.Font)">
      <summary>
 Determines if a font has an equivalent in the consolidation set and returns the name 
 of the consolidated object if it does.  Otherwise returns an empty string. 
 </summary>
 <param name="fontToCheck">The font to check for equivalency in the set.</param>
 <returns>A string containing the name of an equivalent font or an 
 empty string if there is no equivalent.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.hasFontMatch(System.Drawing.Font)">
      <summary>
 Determines if a font has a match in the consolidated set. 
 </summary>
 <param name="fontToCheck">the font to check for matches for</param>
 <returns>A Boolean indicating if the font has a consolidated match.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.consolidateStringFormats(System.Drawing.StringFormat)">
      <summary>
 Checks if a given string format exists in the consolidated set and adds it to the 
 consolidated set if it does not have a match. 
 </summary>
 <param name="stringFormatToCheck">The string format to check for participation in 
 the consolidation set.</param></member>
    <member name="M:GDIObjects.ExportConsolidate.addConsolidatedStringFormat(System.Drawing.StringFormat)">
      <summary>
 Adds a string format to the consolidated set. 
 </summary>
 <param name="format">The string format to consolidate</param></member>
    <member name="M:GDIObjects.ExportConsolidate.getStringFormatName(System.Drawing.StringFormat)">
      <summary>
 Determines if a string format has an equivalent in the consolidation set and returns the name 
 of the consolidated object if it does.  Otherwise returns an empty string. 
 </summary>
 <param name="stringFormatToCheck">The string format to compare for consolidation</param>
 <returns>The name to use if a match is found in the set.  An empty string otherwise.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.hasStringFormatMatch(System.Drawing.StringFormat)">
      <summary>
 Checks whether a specific string format has a match in the consolidation set. 
 </summary>
 <param name="stringFormatToCheck">The format to check for existence in the set</param>
 <returns>A Boolean indicating whether the string format was found or not.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.stringFormatEquality(System.Drawing.StringFormat,System.Drawing.StringFormat)">
      <summary>
 Determines if two string formats are equal. 
 </summary>
 <param name="strFormat1">The first string format to compare.</param>
 <param name="strFormat2">The second string format to compare</param>
 <returns>A Boolean indicating whether, for our purposes, string formats are equal.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.fontEquality(System.Drawing.Font,System.Drawing.Font)">
      <summary>
 Determines if two fonts are equal (have the same properties) 
 </summary>
 <param name="font1">The first font to test for equality</param>
 <param name="font2">The second font to test for equality</param>
 <returns>A Boolean indicating if the two fonts are equal.</returns></member>
    <member name="M:GDIObjects.ExportConsolidate.Dispose(System.Boolean)">
      <summary>
 Disposes of the ExportConsolidate class 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not.</param></member>
    <member name="T:GDIObjects.ExportPrint">
      <summary>
 Responsible for emitting a GDI+ Architect PrintDocument to code. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportPrint._initGraphics">
      <summary>
 Method where graphic resources are initialized.  This is similar to the 
 windows form's InitializeComponent method. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportPrint._disposeGraphics">
      <summary>
 Disposal section of the outgoing print document.  Allows for disposing of 
 custom graphic resources created at the field level of the print document. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportPrint._Members">
      <summary>
 class level member declaration section. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportPrint._InheritedDispose">
      <summary>
 Used to call the custom  DisposeGraphics method by overriding the default dispose 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportPrint._PrintOverride">
      <summary>
 Used to override the onPrintPage event so the custom printing can be called 
 exporting each page in turn. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportPrint._PrintGraphics">
      <summary>
 Used to produce the actual graphics code for print page events. 
 </summary>
    </member>
    <member name="M:GDIObjects.ExportPrint.#ctor(GDIObjects.GDIDocument)">
      <summary>
 Creates a new instance of the class given a specific document to export 
 </summary>
 <param name="doc">The GDIDocument to export</param></member>
    <member name="M:GDIObjects.ExportPrint.CreatePRINTDeclaration">
      <summary>
 Builds the actual class that holds all of the print related code. 
 </summary>
 <returns>A CodeTypeDeclaration to which the class will add methods and members.</returns></member>
    <member name="M:GDIObjects.ExportPrint.createPageConditional(GDIObjects.GDIPage)">
      <summary>
 Creates a Boolean statement capable of comparing the currentPage variable 
 for equality to a specific page (the page passed in to this method) 
 </summary>
 <param name="pg">The page to check for equality against.</param>
 <returns>A statement that checks if the current page matches the page number.</returns></member>
    <member name="M:GDIObjects.ExportPrint.createPage(GDIObjects.GDIPage)">
      <summary>
 Emits all of the code required to render a specific page to the print document. 
 </summary>
 <param name="pg">The page to emit</param></member>
    <member name="M:GDIObjects.ExportPrint.createPrintpageOverride">
      <summary>
 Emits the OnPrintPage override needed for GDI+ Architect's method of handling pages. 
 </summary>
 <returns>The OnPrintPage method </returns></member>
    <member name="M:GDIObjects.ExportPrint.createPrintCounters(System.CodeDom.CodeTypeMemberCollection)">
      <summary>
 Emits a series of counters to track the current page and the total pages 
 </summary>
 <param name="decl">Declarations section of the class to place these counters in.</param></member>
    <member name="M:GDIObjects.ExportPrint.CreatePrintGraphicsMember">
      <summary>
 Generates the _PrintGraphics method to which the actual graphic code is appended. 
 </summary>
 <returns>A method capable of rendering all of the graphics.</returns></member>
    <member name="M:GDIObjects.ExportPrint.Generate">
      <summary>
 Main entry point for generating a print document. 
 </summary>
 <returns>A string containing all of the code required to generate a print document.</returns></member>
    <member name="T:GDIObjects.ExportQuick">
      <summary>
 Responsible for generating GDI+ Architect's Quick Code (A subset of code for selected objects 
 on the drawing surface). 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportQuick._GDIObjects">
      <summary>
 The collection of objects that code is being generated for. 
 </summary>
    </member>
    <member name="M:GDIObjects.ExportQuick.#ctor(GDIObjects.GDIDocument,GDIObjects.GDIObjCol)">
      <summary>
 Creates a new instance of the QuickCode object given a parent document objects belong to, and the 
 objects that are to be exported. 
 </summary>
 <param name="doc">The document that the objects code generation belongs to is being created for.</param>
 <param name="objects">The objects to generate quick code for.</param></member>
    <member name="M:GDIObjects.ExportQuick.Generate">
      <summary>
 Main entry point for generating the quick code class. 
 </summary>
 <returns>A string containing the quick code </returns></member>
    <member name="M:GDIObjects.ExportQuick.CreateCLASSDeclaration">
      <summary>
 Creates the quick code class declaration. 
 </summary>
 <returns>A class for holding the quick code.</returns></member>
    <member name="M:GDIObjects.ExportQuick.CreateCLASSRenderGraphics">
      <summary>
 Creates the Quick Code's Render Graphics method to which objects can append their drawing code. 
 </summary>
 <returns>A CodeMemberMethod holding the render graphics method</returns></member>
    <member name="T:GDIObjects.FillBrowser">
      <summary>
 Provides an interface for selecting fills in a property grid. 
 </summary>
 <remarks>For more information about how this works, see the framework's 
 ExpandableObjectConverter class. 
 </remarks></member>
    <member name="M:GDIObjects.FillBrowser.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
 This overload causes the property grid to always display "Fill Properties" regardless 
 of what type of fill is being displayed.  Removing it will show the name of the type 
 of fill. 
 </summary>
 <param name="context">Type Descriptor context</param>
 <param name="culture">Culture info</param>
 <param name="value">The object being browsed</param>
 <param name="destinationType">The output type expected. In the case of the property 
 grid, this is a string.</param>
 <returns>A string containing the words "Fill Properties" for the property grid.</returns>
 <remarks>This could be expanded on by interrogating the incoming value property and 
 building something more interesting in the return string. 
 </remarks></member>
    <member name="T:GDIObjects.GDIFill">
      <summary>
 Virtual class all GDI+ Architect fills inherit from. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIFill.#ctor">
      <summary>
 Constructor for a new instance of a fill.  Sets the parent and consolidation settings. 
 </summary>
 <remarks>Notice that this sets consolidate based on the session settings. 
 </remarks></member>
    <member name="E:GDIObjects.GDIFill.FillUpdated" />
    <member name="T:GDIObjects.GDIFill.FillUpdatedEventHandler">
      <summary>
 Raised when a property of a fill is changed. 
 </summary>
 <remarks>The session listens for this property and multicasts to interested listeners. 
 </remarks></member>
    <member name="F:GDIObjects.GDIFill._Disposed">
      <summary>
 Whether this Fill has been disposed or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIFill._Brush">
      <summary>
 A System.Drawing.Brush used to paint the GDIFilledShape the GDIFill belongs to. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIFill._Consolidate">
      <summary>
 Whether to consolidate this fill with similar fills 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIFill.UpdateFill">
      <summary>
 Required for inheritors to implement.  Updates the fill's current brush. 
 </summary>
 <remarks>This method should probably have been named "UpdateBrush" 
 </remarks></member>
    <member name="M:GDIObjects.GDIFill.deserialize">
      <summary>
 Required for inheritors.  Deserializes a fill. 
 </summary>
 <param name="parent">Parent shape being deserialized.</param>
 <returns>True for the default case.  If inheritors anticipate potential problems 
 deserializing a fill, they should interrogate their properties and return false 
 if the fill cannot be deserialized.</returns></member>
    <member name="M:GDIObjects.GDIFill.OnParentUpdated(GDIObjects.GDIFilledShape)">
      <summary>
 Required for inheritors.  What to do when the fill's parent shape has been updated. 
 </summary>
 <param name="obj">The parent shape which has changed.</param></member>
    <member name="M:GDIObjects.GDIFill.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts the fill to XML (for SVG export) 
 </summary>
 <param name="xmlDoc">XMLDocument to append the XML to.</param>
 <param name="defs">Definitions section of the SVG document.</param>
 <param name="parent">Parent to which this fill belongs.</param></member>
    <member name="M:GDIObjects.GDIFill.emit(System.String,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits code for a consolidated object. 
 </summary>
 <param name="sSharedName">The shared consolidated name to use</param>
 <param name="declarations">CodeDOM Declaration section</param>
 <param name="InitGraphics">the GDI+ Architect initGraphics method.</param>
 <param name="RenderGDI">The GDI+ Architect renderGDI method.</param>
 <param name="DisposeGDI">The GDI+ Architect disposeGDI method</param>
 <param name="ExportSettings">The currently selected export settings</param>
 <returns>A string containing the name of the fill created in code.</returns></member>
    <member name="M:GDIObjects.GDIFill.emit(GDIObjects.GDIObject,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits code.  Inheritors are responsible for implementing this class. 
 </summary>
 <param name="obj">The parent object whose fill is being emitted.</param>
 <param name="declarations">CodeDOM declaration sections</param>
 <param name="InitGraphics">The GDI+ Architect initializegrapics method</param>
 <param name="RenderGDI">The GDI+ architect render GDI method</param>
 <param name="DisposeGDI">The GDI+ architect dispose GDI method.</param>
 <param name="ExportSettings">The export settings.</param>
 <param name="Consolidated">The set of consolidated objects thus far.</param>
 <returns>A string containing the name of the fill created in code.</returns></member>
    <member name="M:GDIObjects.GDIFill.NotifyFillUpdated">
      <summary>
 Provides a way for inherited objects to raise the FillUpdated event as needed. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIFill.ExportEquality(GDIObjects.GDIFill,GDIObjects.GDIFill)">
      <summary>
 Determines if two fills are identical (for when consolidating fills). 
 </summary>
 <param name="fill1">First fill to compare</param>
 <param name="fill2">Second fill to compare.</param>
 <returns>A Boolean indicating whether the two fills are equiv.</returns></member>
    <member name="M:GDIObjects.GDIFill.getColorAssignment(System.Drawing.Color)">
      <summary>
 Retrieves a color assignment statement.  This is used when emitting code. 
 </summary>
 <param name="val">The color.</param>
 <returns>A code expression that assigns the color to the appropriate value.</returns>
 <remarks>This statement first attempts to used named colors if possible. 
 If this isn't possible, it uses the ARGB values instead. 
 </remarks></member>
    <member name="P:GDIObjects.GDIFill.Consolidate">
      <summary>
 Whether to consolidate this fill with identical fills. 
 </summary>
 <value>True if the fill should consolidate, false otherwise</value></member>
    <member name="M:GDIObjects.GDIFill.Dispose">
      <summary>
 Calls the default dispose 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIFill.Dispose(System.Boolean)">
      <summary>
 Disposes of the fill, releasing the brush resource. 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not.</param></member>
    <member name="M:GDIObjects.GDIFill.Clone">
      <summary>
 Clones a fill of a specific object, returning a new fill. 
 </summary>
 <returns>A new fill with identical properties to the original fill.</returns></member>
    <member name="P:GDIObjects.GDIFill.Brush">
      <summary>
 Gets a System.Drawing brush capable of painting the current fill to a surface. 
 </summary>
 <value>A Brush with which the a graphics context can be painted to render 
 the fill.</value></member>
    <member name="T:GDIObjects.GDIGradientFill">
      <summary>
 A simple two color gradient fill for fillable GDIObjects.  Contains a start color and 
 end color, a gradient style, and optional gradient angle.  Also contains a point from 
 which to draw the gradient from depending on whether the GradientFill is tracking its 
 parent location. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIGradientFill.EnumGradientMode">
      <summary>
 An Enumeration of Gradient Directions.  All but Custom map to the drawing 
 namespace's LinearGradientMode mode.  Custom means an angle will be used instead 
 of a gradient mode. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill.EnumGradientMode.Horizontal">
      <summary>Maps to LinearGradientMode.Horizontal</summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill.EnumGradientMode.BackwardDiagonal">
      <summary>Maps to LinearGradientMode.Horizontal</summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill.EnumGradientMode.ForwardDiagonal">
      <summary>Maps to LinearGradientMode.BackwardDiagonal</summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill.EnumGradientMode.Vertical">
      <summary>Maps to LinearGradientMode.ForwardDiagonal</summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill.EnumGradientMode.Custom">
      <summary>Indicates a custom angle argument will be specified 
 instead of a using a gradient mode.</summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill._GradientArea">
      <summary>
 The area over which to paint the gradient. 
 When "track fill" is set this becomes the parent's bounds. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill._Color1">
      <summary>
 The first color in the two color gradient. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill._Color2">
      <summary>
 The second color in the two color gradient. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill._GradientMode">
      <summary>
 The gradient mode (maps to the build in System.Drawing.Drawing2D.LinearGradientMode 
 which the exception of EnumGradientMode.Custom which indicates an angle will 
 be specified for the gradient). 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIGradientFill._GradientAngle">
      <summary>
 The angle to project the gradient at (used only  when _GradientMode is set 
 to custom. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIGradientFill.#ctor(System.Drawing.Color,System.Drawing.Color,GDIObjects.GDIGradientFill.EnumGradientMode)">
      <summary>
 Creates a new gradient fill given the fill colors and a gradient mode 
 </summary>
 <param name="parent">The parent object being filled with this fill</param>
 <param name="color1">The first color in the two color gradient fill</param>
 <param name="color2">The second color in the two color gradient fill</param>
 <param name="eMode">The fill mode</param></member>
    <member name="M:GDIObjects.GDIGradientFill.#ctor(GDIObjects.GDIGradientFill)">
      <summary>
 Creates a new gradient fill given a second gradient fill to base it on. 
 </summary>
 <param name="parent">The parent object to be filled.</param>
 <param name="fill">The fill to base the gradient on.</param></member>
    <member name="M:GDIObjects.GDIGradientFill.ExportEquality(GDIObjects.GDIGradientFill,GDIObjects.GDIGradientFill)">
      <summary>
 Determines if two gradients share export equality for purposes of consolidation 
 </summary>
 <param name="fill1">The first gradient fill to examine</param>
 <param name="fill2">The second gradient fill to examine</param>
 <returns>A Boolean indicating whether the two gradients are equivalent.</returns></member>
    <member name="M:GDIObjects.GDIGradientFill.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts the gradient fill to an XML source for SVG display. 
 </summary>
 <param name="xmlDoc">See base class</param>
 <param name="defs">See base class</param>
 <param name="parent">See base class</param></member>
    <member name="M:GDIObjects.GDIGradientFill.emit(GDIObjects.GDIObject,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a gradient fill to code. 
 </summary>
 <param name="obj">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <param name="Consolidated">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDIGradientFill.emit(System.String,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated gradient fill to code. 
 </summary>
 <param name="sSharedName">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDIGradientFill.OnParentUpdated(GDIObjects.GDIFilledShape)">
      <summary>
 Responds to changes to the parent GDIFilledShape 
 </summary>
 <param name="obj">The parent GDIObject</param></member>
    <member name="M:GDIObjects.GDIGradientFill.UpdateFill">
      <summary>
 Responds to requests from the base class to recreate a brush used on the surface. 
 </summary>
    </member>
    <member name="P:GDIObjects.GDIGradientFill.Angle">
      <summary>
 Gets or sets the angle of the gradient used in custom fill scenarios. 
 </summary>
 <value>A single (float) representing the angle of the gradient fill.</value></member>
    <member name="P:GDIObjects.GDIGradientFill.Bounds">
      <summary>
 Gets or sets a rectangle used to bound the filled gradient area. 
 This will usually equal the parent rectangle unless trackfill has been disabled. 
 </summary>
 <value>The rectangle bounding the gradient fill.</value></member>
    <member name="P:GDIObjects.GDIGradientFill.GradientMode">
      <summary>
 Gets or sets the gradient mode used to populate the gradient. 
 </summary>
 <value>an EnumGradientMode, which is equiv. to the System.Drawing GradientModes with 
 the exception of a "Custom" setting used when a custom gradient angle is being used </value></member>
    <member name="P:GDIObjects.GDIGradientFill.Color1">
      <summary>
 Gets or sets the first color used in a gradient fill. 
 </summary>
 <value>A System.Drawing Color</value></member>
    <member name="P:GDIObjects.GDIGradientFill.Color2">
      <summary>
 Gets or sets the second color used in a gradient fill. 
 </summary>
 <value>A System.Drawing Color</value></member>
    <member name="M:GDIObjects.GDIGradientFill.ToString">
      <summary>
 Returns a string representation of this object. 
 </summary>
 <returns>A string representation of the object</returns></member>
    <member name="M:GDIObjects.GDIGradientFill.op_Equality(GDIObjects.GDIGradientFill,GDIObjects.GDIGradientFill)">
      <summary>
 Determines if two gradients fills are equal. 
 </summary>
 <param name="fill1">The first gradient fill to examine</param>
 <param name="fill2">The second gradient fill to examine</param>
 <returns>A Boolean indicating if the two fills are equivalent.</returns></member>
    <member name="T:GDIObjects.GDIHatchFill">
      <summary>
 A Hatch fill for a fillable GDIObject.  Corresponds to a Drawing2D.HatchStyle 
 enumeration set.  Contains a start and end color as well as a hatch setting. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIHatchFill._HatchBackColor">
      <summary>
 The back color to use in the hatch. 
 </summary>
 <remarks>Hatches are composed of both a fore and a back color. 
 </remarks></member>
    <member name="F:GDIObjects.GDIHatchFill._HatchForeColor">
      <summary>
 The fore color to use in the hatch. 
 </summary>
 <remarks>Hatches are composed of both a fore and a back color. 
 </remarks></member>
    <member name="F:GDIObjects.GDIHatchFill._HatchStyle">
      <summary>
 The hatch style to use in the hatch.  Corresponds to a Drawing2D.HatchStyle. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIHatchFill.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.HatchStyle)">
      <summary>
 Creates a new instance of a GDIHatchFill given a hatch style, back color and fore color. 
 </summary>
 <param name="parent">The parent node to populate.</param>
 <param name="forecolor">The forecolor of the hatch pattern</param>
 <param name="backcolor">The backcolor of the hatch pattern</param>
 <param name="style">The hatch style of the hatch pattern</param></member>
    <member name="M:GDIObjects.GDIHatchFill.#ctor(GDIObjects.GDIHatchFill)">
      <summary>
 Creates a new GDIHatchFill given another GDIHatchFill to copy. 
 </summary>
 <param name="parent">The parent shape this fill is being used with.</param>
 <param name="fill">The GDIHatch fill to copy.</param></member>
    <member name="M:GDIObjects.GDIHatchFill.emit(System.String,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated hatch fill to code. 
 </summary>
 <param name="sSharedName">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDIHatchFill.emit(GDIObjects.GDIObject,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a hatch fill to code. 
 </summary>
 <param name="obj">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <param name="Consolidated">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDIHatchFill.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts the hatch fill to an XML source for SVG display. 
 </summary>
 <param name="xmlDoc">See base class</param>
 <param name="defs">See base class</param>
 <param name="parent">See base class</param></member>
    <member name="M:GDIObjects.GDIHatchFill.AppendPatternPolygon(System.Xml.XmlDocument,System.Xml.XmlNode,System.String)">
      <summary>
 Used in the SVG code generation to create a polygon pattern 
 </summary>
 <param name="xmldoc">Parent SVG document</param>
 <param name="parentnode">Node that this pattern should append to </param>
 <param name="pts">The point set used in creating the pattern</param></member>
    <member name="M:GDIObjects.GDIHatchFill.appendPatternFillColor(System.Xml.XmlDocument,System.Xml.XmlNode)">
      <summary>
 Appends a fill color to an SVG pattern. 
 </summary>
 <param name="xmlDoc">The SVG document to append the pattern to</param>
 <param name="node">The node to append to.</param></member>
    <member name="M:GDIObjects.GDIHatchFill.appendPatternLineColor(System.Xml.XmlDocument,System.Xml.XmlNode)">
      <summary>
 Appends a line pattern to the SVG document 
 </summary>
 <param name="xmlDoc">The document to append to</param>
 <param name="node">The node to append to.</param></member>
    <member name="M:GDIObjects.GDIHatchFill.AppendPatternEllipse(System.Xml.XmlDocument,System.Xml.XmlNode,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Appends an ellipse pattern to an SVG document. 
 </summary>
 <param name="xmlDoc">The document to append to.</param>
 <param name="parentNode">The node to append to</param>
 <param name="cx">The x position of the pattern.</param>
 <param name="cy">The y position of the pattern</param>
 <param name="rx">The radius x of the pattern</param>
 <param name="ry">The radius y of the pattern</param></member>
    <member name="M:GDIObjects.GDIHatchFill.AppendPatternLine(System.Xml.XmlDocument,System.Xml.XmlNode,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
 Appends a line pattern to an SVG document that has dash settings. 
 </summary>
 <param name="xmlDoc">The SVG document to append to</param>
 <param name="parentNode">The node to append to</param>
 <param name="x1">The first point's x position in the pattern</param>
 <param name="y1">The first point's y position in the pattern</param>
 <param name="x2">The second point's x position in the pattern</param>
 <param name="y2">The second point's y position in the pattern</param>
 
 <param name="dashSet">Dash settings for the line pattern</param></member>
    <member name="M:GDIObjects.GDIHatchFill.AppendPatternLine(System.Xml.XmlDocument,System.Xml.XmlNode,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Appends a line pattern to an SVG document 
 </summary>
 <param name="xmlDoc">The parent SVG document</param>
 <param name="parentNode">The parent node</param>
 <param name="x1">The first point's x position in the pattern</param>
 <param name="y1">The first point's y position in the pattern</param>
 <param name="x2">The second point's x position in the pattern</param>
 <param name="y2">The second point's y position in the pattern</param></member>
    <member name="M:GDIObjects.GDIHatchFill.AppendBackGroundRect(System.Xml.XmlDocument,System.Xml.XmlNode,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Appends a back ground rectangle to a pattern.  Used when generating SVG code. 
 </summary>
 <param name="xmlDoc">The parent SVG document</param>
 <param name="parentNode">The parent node</param>
 <param name="x">The x position of the top left corner of the rectangle</param>
 <param name="y">The y position of the top left corner of the rectangle</param>
 <param name="width">The width of the rectangle</param>
 <param name="height">The height of the rectangle</param></member>
    <member name="M:GDIObjects.GDIHatchFill.AppendPatternRect(System.Xml.XmlDocument,System.Xml.XmlNode,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
 Appends a rectangle pattern to a pattern (foreground).  Used in SVG document 
 generation. 
 </summary>
 <param name="xmlDoc">The parent SVG document</param>
 <param name="parentNode">The parent node</param>
 <param name="x">The x position of the top left corner of the rectangle</param>
 <param name="y">The y position of the top left corner of the rectangle</param>
 <param name="width">The width of the rectangle</param>
 <param name="height">The height of the rectangle</param></member>
    <member name="M:GDIObjects.GDIHatchFill.buildStyle(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Builds the hatch style pattern as an SVG XML equivalent (as close as possible) 
 </summary>
 <param name="xmlDoc">Parent SVG document</param>
 <param name="defs">The definitions node (definitions section) of the SVG document.</param>
 <param name="parent">The parent node to append the hatch to.</param>
 <param name="nodeHatch">The hatch node where the pattern is being used.</param>
 <returns>An XMLNode that contains everything necessary to render the hatch style in 
 SVG.</returns></member>
    <member name="M:GDIObjects.GDIHatchFill.ToString">
      <summary>
 Returns a string representation of this object. 
 </summary>
 <returns>A string representation of the object</returns></member>
    <member name="M:GDIObjects.GDIHatchFill.op_Equality(GDIObjects.GDIHatchFill,GDIObjects.GDIHatchFill)">
      <summary>
 Determines if two GDIHatchFill objects are equivalent. 
 </summary>
 <param name="fill1">The first GDIHatchFill object to compare</param>
 <param name="fill2">The second GDIHatchFill object to compare</param>
 <returns>A Boolean indicating whether the two fills are identical.</returns></member>
    <member name="M:GDIObjects.GDIHatchFill.OnParentUpdated(GDIObjects.GDIFilledShape)">
      <summary>
 Allows the hatch fill to respond to changes in its parent state.  In this case, 
 nothing happens since the hatch fill has no dependencies on its parent like the 
 texture or gradient fill. 
 </summary>
 <param name="obj">The parent GDIFilledShape</param></member>
    <member name="M:GDIObjects.GDIHatchFill.UpdateFill">
      <summary>
 Creates a brush capable of drawing this fill. 
 </summary>
    </member>
    <member name="P:GDIObjects.GDIHatchFill.HatchForeColor">
      <summary>
 Gets or sets the forecolor of the hatch style 
 </summary>
 <value>A System.Drawing color.</value></member>
    <member name="P:GDIObjects.GDIHatchFill.HatchBackColor">
      <summary>
 Gets or sets the backcolor of the hatch style. 
 </summary>
 <value>A System.Drawing color</value></member>
    <member name="P:GDIObjects.GDIHatchFill.HatchStyle">
      <summary>
 Gets or sets the Hatch style of the hatch fill. 
 </summary>
 <value>A Drawing2D.hatchstyle</value></member>
    <member name="T:GDIObjects.GDISolidFill">
      <summary>
 A solid fill for fillable objects.  The solid fill is composed only of a color 
 </summary>
    </member>
    <member name="F:GDIObjects.GDISolidFill._FillColor">
      <summary>
 The color to fill this parent object with.  This is the only interesting 
 property for solid fills. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDISolidFill.#ctor(System.Drawing.Color)">
      <summary>
 Creates a new instance of a solid fill given a parent shape and a color. 
 </summary>
 <param name="parent">A filled shape instance this fill is associated with.</param>
 <param name="ccolor">The color to assign to the solid fill.</param></member>
    <member name="M:GDIObjects.GDISolidFill.#ctor(GDIObjects.GDISolidFill)">
      <summary>
 Creates a new instance of a solid fill given a parent shape and another fill to base this one on. 
 </summary>
 <param name="fill">The other fill to use as a basis for this fill's properties.</param></member>
    <member name="M:GDIObjects.GDISolidFill.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts the solid fill to an XML source for SVG display. 
 </summary>
 <param name="xmlDoc">See base class</param>
 <param name="defs">See base class</param>
 <param name="parent">See base class</param></member>
    <member name="M:GDIObjects.GDISolidFill.emit(System.String,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated solid fill to code. 
 </summary>
 <param name="sSharedName">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDISolidFill.emit(GDIObjects.GDIObject,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a solid fill to code. 
 </summary>
 <param name="obj">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <param name="Consolidated">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDISolidFill.ToString">
      <summary>
 Returns a string representation of this object. 
 </summary>
 <returns>A string representation of the object</returns></member>
    <member name="M:GDIObjects.GDISolidFill.op_Equality(GDIObjects.GDISolidFill,GDIObjects.GDISolidFill)">
      <summary>
 Compares two solid fills to see if they are equivalent 
 </summary>
 <param name="fill1">The first solid fill</param>
 <param name="fill2">The second solid fill</param>
 <returns>A Boolean indicating if the fills are equivalent.</returns></member>
    <member name="P:GDIObjects.GDISolidFill.Color">
      <summary>
 Sets the color of the solid fill. 
 </summary>
 <value>A System.Drawing color</value></member>
    <member name="M:GDIObjects.GDISolidFill.OnParentUpdated(GDIObjects.GDIFilledShape)">
      <summary>
 Implements the base class's (GDIFill) onparentupdated function.  In this case 
 it does nothing since solid fills do not need to know anything about their 
 parent. 
 </summary>
 <param name="obj">The parent object being updated</param></member>
    <member name="M:GDIObjects.GDISolidFill.UpdateFill">
      <summary>
 Implements the base class's (GDIFill) updateFill method.  Creates a solid brush from 
 the current settings and assigns it to the _Brush member. 
 </summary>
 <remarks>Raises the base class FillUpdated event 
 </remarks></member>
    <member name="T:GDIObjects.GDITexturedFill">
      <summary>
 A textured fill for fillable GDIObjects.  Texture fills paint objects using 
 a graphic pattern with a specific winding mode and start point for the pattern. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITexturedFill._ImageSource">
      <summary>
 A string containing the file name portion of the path to the image source to use 
 as a fill. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITexturedFill._TextureWrapMode">
      <summary>
 The wrap mode used to fill this texture 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITexturedFill._RunTimeSource">
      <summary>
 The type of runtime source - See EnumLinkType for more information. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITexturedFill._Path">
      <summary>
 A path to the image source used to render the texture. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITexturedFill._XTransform">
      <summary>
 X component of a transformation, if any, applied to this texture fill. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITexturedFill._YTransform">
      <summary>
 Y component of a transformation, if any, applied to this texture fill. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITexturedFill._Image">
      <summary>
 A non serialized bitmap used to render the texture inside GDI+ Architect 
 </summary>
    </member>
    <member name="M:GDIObjects.GDITexturedFill.#ctor(GDIObjects.GDITexturedFill)">
      <summary>
 Creates a textured fill given a parent shape and another textured fill to base 
 the instance off of. 
 </summary>
 <param name="parent">The parent shape this fill is responsible for filling.</param>
 <param name="fill">The texture fill to copy properties from.</param></member>
    <member name="M:GDIObjects.GDITexturedFill.#ctor(System.String)">
      <summary>
 Creates a textured fill given a parent fill and a source image to use as the 
 texture. 
 </summary>
 <param name="parent">The parent shape this fill is responsible for filling.</param>
 <param name="sImageSource">A path to a source image to use to fill with.</param></member>
    <member name="M:GDIObjects.GDITexturedFill.ExportEquality(GDIObjects.GDITexturedFill,GDIObjects.GDITexturedFill)">
      <summary>
 Determines if Two texture fills are equivalent for the purposes of export. 
 </summary>
 <param name="fill1">The first texture fill to compare.</param>
 <param name="fill2">The second texture fill to compare.</param>
 <returns>A Boolean indicating if the two textures are equiv.</returns></member>
    <member name="M:GDIObjects.GDITexturedFill.emit(System.String,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings)">
      <summary>
 Emits a consolidated textured fill to code. 
 </summary>
 <param name="sSharedName">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDITexturedFill.emit(GDIObjects.GDIObject,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a textured fill to code. 
 </summary>
 <param name="obj">See base class</param>
 <param name="declarations">See base class</param>
 <param name="InitGraphics">See base class</param>
 <param name="RenderGDI">See base class</param>
 <param name="DisposeGDI">See base class</param>
 <param name="ExportSettings">See base class</param>
 <param name="Consolidated">See base class</param>
 <returns>See base class</returns></member>
    <member name="M:GDIObjects.GDITexturedFill.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts the textured fill to an XML source for SVG display. 
 </summary>
 <param name="xmlDoc">See base class</param>
 <param name="defs">See base class</param>
 <param name="parent">See base class</param></member>
    <member name="M:GDIObjects.GDITexturedFill.ToString">
      <summary>
 Returns a string representation of this object. 
 </summary>
 <returns>A string representation of the object</returns></member>
    <member name="M:GDIObjects.GDITexturedFill.setupPath">
      <summary>
 Initializes the path to a texture resource based upon a chosen EnumLinkType. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDITexturedFill.op_Equality(GDIObjects.GDITexturedFill,GDIObjects.GDITexturedFill)">
      <summary>
 Determines if two texture fills are equal (have equal properties) 
 </summary>
 <param name="fill1">The first texture fill to compare</param>
 <param name="fill2">The second texture fill to compare</param>
 <returns>A Boolean indicating if the two textures are equal</returns></member>
    <member name="M:GDIObjects.GDITexturedFill.GetImage">
      <summary>
 Returns an image used to fill the texture. 
 </summary>
 <returns>An image used to fill the texture.</returns></member>
    <member name="P:GDIObjects.GDITexturedFill.Path">
      <summary>
 Returns the Path to the image used in this texture fill.  Note that this property 
 must be used in conjunction with the EnumLinkType value to determine how it should 
 be interpreted. 
 </summary>
 <value>A path to the resource.</value></member>
    <member name="P:GDIObjects.GDITexturedFill.XOffSet">
      <summary>
 Gets or sets the X Offset value of a fill transformation. 
 </summary>
 <value>A Single (float) of the amount to offset the X position by.</value></member>
    <member name="P:GDIObjects.GDITexturedFill.YOffSet">
      <summary>
 Gets or sets the Y Offset value of a fill transformation. 
 </summary>
 <value>A Single (float) of the amount to offset the Y position by.</value></member>
    <member name="P:GDIObjects.GDITexturedFill.RuntimeSource">
      <summary>
 Returns the Runtimesource type of this TextureFill.  See EnumLinkType for more 
 information. 
 </summary>
 <value>An EnumLinkType enumeration value.</value>
 <remarks>Note when this is set it cascades some property changes using the private 
 setupPath method. 
 </remarks></member>
    <member name="P:GDIObjects.GDITexturedFill.WrapMode">
      <summary>
 Returns the Drawing2D wrapmode of this texture fill. 
 </summary>
 <value>a Drawing2D wrapmode</value></member>
    <member name="P:GDIObjects.GDITexturedFill.ImageSource">
      <summary>
 Gets or sets the ImageSource (the location of an image file used to render the texture) 
 </summary>
 <value>A string value containing a path to the image resource.</value></member>
    <member name="M:GDIObjects.GDITexturedFill.OnParentUpdated(GDIObjects.GDIFilledShape)">
      <summary>
 Handles an update of the fill's parent (the shape being filled by the fill) 
 </summary>
 <param name="obj">The parent object to fill with.</param></member>
    <member name="M:GDIObjects.GDITexturedFill.UpdateFill">
      <summary>
 Sets the _Brush member used to actually paint the fill to textures. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDITexturedFill.deserialize">
      <summary>
 Deserializes a Texture fill 
 </summary>
 <param name="parent">the parent shape this fill is responsible for filling.</param>
 <returns>A Boolean indicating if deserialization was successful</returns>
 <remarks>Unlike the other GDIFill deserialize methods, this one has functionality. 
 It is responsible for checking if the texture source used to fill the image is still 
 valid. 
 </remarks></member>
    <member name="M:GDIObjects.GDITexturedFill.Dispose(System.Boolean)">
      <summary>
 Disposes of the textured fill, in turn disposing of the image field. 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not.</param></member>
    <member name="T:GDIObjects.GDIClosedPath">
      <summary>
 A closed path (A path whos starting point connects to its end point). 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIClosedPath.#ctor(GDIObjects.GDIOpenPath)">
      <summary>
 Creates a new instance of a closed path given an open path which has been marked 
 "to be closed".  This means that the user moved the mouse cursor within range of the 
 start point while drawing an open path with the pen tool and clicked indicating they 
 wish to closed the path. 
 </summary>
 <param name="openpath">The open path to close on itself.</param></member>
    <member name="F:GDIObjects.GDIClosedPath._Points">
      <summary>
 An array of points that make up the path 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIClosedPath._PointTypes">
      <summary>
 An array of types of the points in the path.  These types correspond to 
 Drawing2D.PathPointType types.  For more information on the types of points 
 that can be used in a path, see this enumeration. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIClosedPath._NextnameID">
      <summary>
 Next valid closed path integer suffix (Path1, Path2, etc) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIClosedPath._OffSets">
      <summary>
 Used to supplement dragging of closed paths.  Maintains an array of points indicating 
 by how much each point in the path has been offset by the drag operation. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIClosedPath._HitIndex">
      <summary>
 Records the last point set by hitting one of the handles in the path. This is used 
 to note which point will be dragged if the user continues a drag operation from 
 the down point. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIClosedPath.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIClosedPath to code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIClosedPath.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts a GDIClosedPath to SVG XML and appends it to the outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the closed path to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the closed path to.</param></member>
    <member name="M:GDIObjects.GDIClosedPath.NextName">
      <summary>
 Returns the next valid name for a new GDIClosedPath 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="P:GDIObjects.GDIClosedPath.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the words "Closed Path"</value></member>
    <member name="M:GDIObjects.GDIClosedPath.resetPath">
      <summary>
 Resets the path, which means recreating the visually displayed graphics path. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIClosedPath.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
 Renders the closed path to a surface 
 </summary>
 <param name="g">Graphics context to draw against</param>
 <param name="eDrawMode">The current draw mode</param></member>
    <member name="M:GDIObjects.GDIClosedPath.getHandles(System.Single)">
      <summary>
 Returns a series of HitHandle objects relevant to this object 
 </summary>
 <param name="fscale">The current zoom factor of the surface</param>
 <returns>An array of HitHandle object</returns></member>
    <member name="P:GDIObjects.GDIClosedPath.LastHitHandle">
      <summary>
 Gets the last recorded hithandle 
 </summary>
 <value>Returns the last hit handle</value></member>
    <member name="M:GDIObjects.GDIClosedPath.HitTestHandles(System.Drawing.PointF,System.Single)">
      <summary>
 Performs a hit test over a series of handles given a point.  Assigns the _HitIndex 
 field to the handle hit, if any, or -1 if no handle was hit. 
 </summary>
 <param name="ptHit">The point to test handles against</param>
 <param name="fScale">The current zoom factor of the surface</param>
 <returns>The type of handle hit.  For Closed paths this is either a curve or normal 
 point.</returns></member>
    <member name="M:GDIObjects.GDIClosedPath.HitTest(System.Drawing.Rectangle)">
      <summary>
 Performs a hit test for the GDIClosedPath against a rectangle. 
 </summary>
 <param name="rect">A rectangle to compare intersection with the GDIOpenPath 
 against.</param>
 <returns>A Boolean indicating if the rectangle and the path intersect.</returns></member>
    <member name="M:GDIObjects.GDIClosedPath.HitTest(System.Drawing.PointF,System.Single)">
      <summary>
 Performs hit testing on a closed path given a point and a surface scale. 
 </summary>
 <param name="pt">A point in object coordinate space to hit test against</param>
 <param name="fScale">The current zoom factor of the surface</param>
 <returns>A Boolean indicating if the point lies on the path.</returns></member>
    <member name="P:GDIObjects.GDIClosedPath.Rotation">
      <summary>
 Shadows the rotation property.  This is because rotation of ClosedPaths has not 
 been implemented. 
 </summary>
 <value>A single (not used)</value></member>
    <member name="P:GDIObjects.GDIClosedPath.Bounds">
      <summary>
 Gets or sets the bounds of the closed path as a rectangle. 
 </summary>
 <value>A rectangle containing the path</value>
 <remarks>A get operation here is simple and returns the path bounds. However, 
 a set operation is relatively complex.  This is because of the user's expectation of 
 what should happen to the individual points in the path when bounds change. 
 Points should scale like blowing up or deflating a balloon. 
 </remarks></member>
    <member name="P:GDIObjects.GDIClosedPath.Points">
      <summary>
 Returns the points that make up the closed path 
 </summary>
 <value>The points that make up the path</value></member>
    <member name="M:GDIObjects.GDIClosedPath.startDrag(System.Drawing.Point)">
      <summary>
 Overrides the default drag behavior to provide custom drag functionality. 
 The point past in as the parameter is a point in object  coordinate space 
 from which the drag operation is initially invoked. 
 </summary>
 <param name="ptObject">The point from which the drag operation is beginning</param></member>
    <member name="M:GDIObjects.GDIClosedPath.updateDrag(System.Drawing.Point)">
      <summary>
 Updates a drag operation given the latest drag point recorded in object coordinate 
 space. 
 </summary>
 <param name="ptObject">The last recorded drag point from the user interface.</param></member>
    <member name="M:GDIObjects.GDIClosedPath.handlePointSet(System.Drawing.Point)">
      <summary>
 Handles an explicit point set operation on a point in the closed path.  This 
 occurs when the user is dragging a point in the path as opposed to the entire 
 path object which is a drag operation 
 </summary>
 <param name="ptObject">A point in object coordinate space that contains the new 
 point to assign to the last hit point recorded in the _HitIndex field</param></member>
    <member name="M:GDIObjects.GDIClosedPath.createPath">
      <summary>
 Regenerates the path drawn to surfaces and used in hit testing. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIEllipse">
      <summary>
 Represents a circle or ellipse on the drawing surface. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIEllipse._NextnameID">
      <summary>
 Next valid ellipse integer suffix (Ellipse1, Ellipse2, etc) 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIEllipse.#ctor">
      <summary>
 Constructs a new instance of a GDIEllipse. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIEllipse.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts a GDIEllipse to SVG XML and appends it to the outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the ellipse code to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the ellipse to.</param></member>
    <member name="M:GDIObjects.GDIEllipse.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIEllipse to code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIEllipse.createPath">
      <summary>
 Recreates the graphics path used to render the ellipse to a drawing surface. 
 </summary>
    </member>
    <member name="P:GDIObjects.GDIEllipse.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the words "Ellipse"</value></member>
    <member name="M:GDIObjects.GDIEllipse.NextName">
      <summary>
 Returns the next valid name for a new GDIEllipse 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="M:GDIObjects.GDIEllipse.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
 Draws the GDIEllipse to a graphics surface given a DrawingMode. 
 </summary>
 <param name="g">Graphics context to render the ellipse to.</param>
 <param name="eDrawMode">The current drawing mode (See EnumDrawMode for more information)</param></member>
    <member name="T:GDIObjects.GDIField">
      <summary>
 A GDIField exports as a combination of a text block and a property set statement 
 which assigns the value ot the field at runtime. 
 </summary>
 <remarks>
 In order to provide a simple way to assign this text, the GDIField generates a 
 property wrapper (a get/set pair) for a local variable within the class.  Assigning 
 this property with a value in turn assigns the local variable a value which will fill the 
 field when the graphics are drawn. 
 
 The purpose of all of this is to provide a clean wrapper in form scenarios. 
 </remarks></member>
    <member name="F:GDIObjects.GDIField._NextnameID">
      <summary>
 Next valid integer suffix for fields (Field1, Field2, etc) 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIField.#ctor(System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Boolean)">
      <summary>
 Creates a new instance of a GDIField. 
 </summary>
 <param name="Text">The sample text to write into the field</param>
 <param name="Font">The font to draw the field with.</param>
 <param name="rectBounds">The initial bounds of the field.</param>
  <param name="wrap">Whether to wrap text to the bounds of the box or not.</param></member>
    <member name="M:GDIObjects.GDIField.emitVariableWidth(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a variable width field.  Variable width fields continue to grow horizontally, 
 potentially off of the visible / printed surface. 
 </summary>
 <param name="declarations">See Base class</param>
 <param name="InitGraphics">See Base class</param>
 <param name="RenderGDI">See Base class</param>
 <param name="DisposeGDI">See Base class</param>
 <param name="ExportSettings">See Base class</param>
 <param name="Consolidated">See Base class</param></member>
    <member name="M:GDIObjects.GDIField.emitFixedWidth(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a fixed width field.  For fixed width fields, as text reaches the width of 
 the field, the field grows vertically instead of continuing horizontally.  When it 
 runs out of room, it stops displaying characters. 
 </summary>
 <param name="declarations">See Base class</param>
 <param name="InitGraphics">See Base class</param>
 <param name="RenderGDI">See Base class</param>
 <param name="DisposeGDI">See Base class</param>
 <param name="ExportSettings">See Base class</param>
 <param name="Consolidated">See Base class</param></member>
    <member name="M:GDIObjects.GDIField.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIField to code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIField.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts a GDIField to SVG XML and appends it to the outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the field to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the field to.</param></member>
    <member name="P:GDIObjects.GDIField.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the word "Fields"</value></member>
    <member name="M:GDIObjects.GDIField.NextName">
      <summary>
 Returns the next valid name for a new GDIField 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="M:GDIObjects.GDIField.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
 Draws the GDIField to a surface for a specific draw mode. 
 </summary>
 <param name="g">The graphics surface to draw the GDIText object to.</param>
 <param name="eDrawMode">The mode (see EnumDrawMode) that indicates how to render the GDIField object.</param>
 <remarks>GDIFields are one of the few objects that actually makes use of the EnumDrawMode.  Whereas most 
 objects draw the same regardless of the EnumDrawMode, a couple things are different with this 
 instance. 
 
 For printing, the font differ slightly than screen fonts depending on if they are measured in non screen 
 units (units besides Pixel and World). 
 
 For drawing to the surface, not only is the text rendered, but depending on user settings, borders are 
 drawn around the text as helpers for determining the position of the text.  Also sample 
 text is rendered depending on user settings. 
 </remarks></member>
    <member name="T:GDIObjects.GDIFilledShape">
      <summary>
 Virtual class that fillable shapes (shapes with a fill property such as 
 text, rectangles, etc.) inherit from.  Extracts common functionality for 
 fillable shapes into this virtual class. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIFilledShape._Fill">
      <summary>
 The fill used to fill shapes. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIFilledShape._TrackFill">
      <summary>
 Whether to track the fill of this object or not. 
 </summary>
 <remarks>For gradient and texture fills, the way they are rendered can depends 
 on a point or rectangle.  If TrackFill is true, these fills base their position 
 off of their parent object position. 
 </remarks></member>
    <member name="F:GDIObjects.GDIFilledShape._DrawFill">
      <summary>
 Boolean indicating whether to draw the fill of this shape or not. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIFilledShape.#ctor">
      <summary>
 Constructs a new instance of a GDIFilledShape. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIFilledShape.OnFillUpdated(System.Object,System.EventArgs)">
      <summary>
 Notifies the base GDIShape class that the current path is invalid and needs to be 
 recreated. 
 </summary>
 <remarks>Serialization requires this otherwise should be private method to be public. 
 Setting this to private causes binary serialization to throw an exception. 
 </remarks></member>
    <member name="P:GDIObjects.GDIFilledShape.DrawStroke">
      <summary>
 Boolean indicating whether to stroke the shape or not. 
 </summary>
 <value>A Boolean indicating whether to draw the stroke of the shape or not.</value>
 <remarks>This override of the default functionality is used to disallow 
 setting both drawfill and drawstroke to false. 
 </remarks></member>
    <member name="P:GDIObjects.GDIFilledShape.DrawFill">
      <summary>
 Gets or sets a value indicating whether to draw the fill portion of the shape. 
 </summary>
 <value>A Boolean indicating whether to fill the shape.</value></member>
    <member name="P:GDIObjects.GDIFilledShape.Bounds">
      <summary>
 Gets or sets the bounds on the shape. 
 </summary>
 <value>A rectangle that bounds the shape.</value>
 <remarks>Notifies child fills that the parent shape's bounds have changed on a set. 
 </remarks></member>
    <member name="P:GDIObjects.GDIFilledShape.Fill">
      <summary>
 Returns the GDIFilled shape's current fill 
 </summary>
 <value>A GDIFill used to fill the shape.</value>
 <remarks>Raises the onParentUpdated event upon Set.  Also notice that this property 
 clones the brush rather than doing a straight reference assignment upon Set. 
 </remarks></member>
    <member name="P:GDIObjects.GDIFilledShape.TrackFill">
      <summary>
 Whether to "track" the fill 
 </summary>
 <value>
 A Boolean indicating whether tracking is enabled for this shape's fill or not. 
 </value>
 <remarks>For some fills how it is rendered is determined by 
 coordinates.  For example, a gradient Fill has a start and end point for the gradient 
 If track fill is set to true, these coordinates are derived from this shape 
 (the parent shape of the fill).  If it is set to false, the fill is left at the 
 last point it was tracked. 
 </remarks></member>
    <member name="M:GDIObjects.GDIFilledShape.Dispose(System.Boolean)">
      <summary>
 Disposes of the fill, which in turn disposes of allocated brushes. 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not.</param></member>
    <member name="M:GDIObjects.GDIFilledShape.deserialize(GDIObjects.GDIDocument,GDIObjects.GDIPage)">
      <summary>
 Deserialized a Filled shape. 
 </summary>
 <param name="doc">The parent document the filled shape belongs to.</param>
 <param name="pg">The page the filled shape is on, if any.</param>
 <returns>A Boolean indicating if deserialization was successful.</returns></member>
    <member name="T:GDIObjects.GDILine">
      <summary>
 Represents a Line.  Note that the line is rendered to the surface by its base 
 class, GDIOpenPath 
 </summary>
    </member>
    <member name="F:GDIObjects.GDILine._NextnameID">
      <summary>
 Next valid integer suffix for naming lines (Line1, Line2) 
 </summary>
    </member>
    <member name="M:GDIObjects.GDILine.#ctor(System.Drawing.Point,System.Drawing.Point)">
      <summary>
 Constructs an instance of a GDILine from a start and end point. 
 </summary>
 <param name="pt1">The first point in the line.</param>
 <param name="pt2">The second point in the line.</param></member>
    <member name="M:GDIObjects.GDILine.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDILine into code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDILine.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts a GDILine to SVG XML and appends it to the outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the line to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the line to.</param></member>
    <member name="P:GDIObjects.GDILine.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the word "Line"</value></member>
    <member name="P:GDIObjects.GDILine.StartPoint">
      <summary>
 Returns the first point in the line. 
 </summary>
 <value>The first point in the set.</value></member>
    <member name="P:GDIObjects.GDILine.EndPoint">
      <summary>
 Returns the second point in the line. 
 </summary>
 <value>The second point in the set.</value></member>
    <member name="M:GDIObjects.GDILine.NextName">
      <summary>
 Returns the next valid name for a new GDILine. 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="T:GDIObjects.GDIObject">
      <summary>
 GDIObject is a virtual class from which all objects on the design surface 
 inherit.  As much shared functionality as possible has been placed inside this base 
 class.  Note that GDIObjects include images and textual objects as well as shapes. 
 There are further levels of abstraction down the inheritence heirarchy. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._Disposed">
      <summary>
 Whether this object has been disposed or not 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._DragOffset">
      <summary>
 Offset during a drag operation. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._GraphicsContainer">
      <summary>
 Used wrap rotation inside a graphics container 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._OriginalMatrix">
      <summary>
 Used store the original matrix prior to a rotation operation. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._Bounds">
      <summary>
 A rectangle defining the bounds of this particular GDIObject.  This rectangle 
 is used extensively and rebuilt frequently. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._Rotation">
      <summary>
 For objects that are rotatable, the amount of rotation. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._Name">
      <summary>
 The name of this object when emitted to code.  This corresponds to the name of the object 
 in the property grid 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIObject._Scope">
      <summary>
 The scope of this object when it is emitted to code 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObject.#ctor">
      <summary>
 Constructs a new instance of a GDIObject.  This constructor is intended for 
 deserialization 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObject.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
  Virtual function inheritors must implement.  Responsible for rendering the object 
 to a drawing surface. 
 </summary>
 <param name="g">A System.Drawing graphics context to draw itself against.</param>
 <param name="eDrawMode">The type of surface the object is drawing itself to.  Depending 
 on the surface, the object will render itself differently, if needed.  For example, 
 when drawing to a print preview surface, borders on text are suppressed, etc. 
 </param></member>
    <member name="M:GDIObjects.GDIObject.NextName">
      <summary>
 Virtual function inheritors must implement. Returns the next usable name for a new 
 object placed on the drawing surface (Rectangle1, Rectangle2, ...) 
 </summary>
 <returns>The next valid name for an object of this type</returns></member>
    <member name="M:GDIObjects.GDIObject.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Virtual function inheritors must implement to render SVG to the surface. 
 </summary>
 <param name="xmlDoc">The document the object should append its SVG to.</param>
 <param name="defs">Definitions section node of the SVG document</param>
 <param name="group">The group to which the object should append itself</param></member>
    <member name="P:GDIObjects.GDIObject.ClassName">
      <summary>
 Virtual property inheritors must implement. Returns the name of the class used 
 when displaying the GDIObject  in the property browser.  For example, GDIRect 
 returns the word "Rectangle" instead of "GDIRect" 
 </summary>
 <value>A friendly string to display in the property browser</value></member>
    <member name="M:GDIObjects.GDIObject.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Virtual definition that all GDIObjects must implement in order to emit code 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIObject.ExportName">
      <summary>
 Gets the name that should be used for export purposes 
 </summary>
 <returns>The name in string format</returns></member>
    <member name="M:GDIObjects.GDIObject.getScope">
      <summary>
 Emits a scope attribute for a specific object (Private, protected, etc) 
 </summary>
 <returns>A MemberAttribute with the correct scope.</returns>
 <remarks>Note that ExportOptions fully handles this.  This is because the 
 final scope settings are determined by settings at the application level. 
 </remarks></member>
    <member name="M:GDIObjects.GDIObject.emitRotationDeclaration(System.CodeDom.CodeTypeMemberCollection)">
      <summary>
 Emits the rotate related fields as needed for rotated objects 
 </summary>
 <param name="declarations">The area in the class to append class 
  level declarations to</param></member>
    <member name="M:GDIObjects.GDIObject.emitInvokeBeginRotation(System.CodeDom.CodeStatementCollection)">
      <summary>
 Emits a begin rotate statement for the specified object 
 </summary>
 <param name="RenderGDI">The RenderGDI method to append the begin rotate statement to</param></member>
    <member name="M:GDIObjects.GDIObject.emitInvokeEndRotation(System.CodeDom.CodeStatementCollection)">
      <summary>
 Emits an end rotate statement for the object. 
 </summary>
 <param name="RenderGDI">The RenderGDI method to append the end rotate statement to.</param></member>
    <member name="M:GDIObjects.GDIObject.ScaleTransform(System.Drawing.Rectangle,System.Single,System.Single)">
      <summary>
 Performs a scale transform on an object.  Inheritors can override this method 
 to perform custom scaling as needed.  Note the original bounds argument is not the 
 original bounds of the object, but the original bounds of the set of selected objects that 
 this object belongs to.  There may be one or more other selected objects, and users expect 
 that they "scale together" when a scale is performed and maintain position based upon the 
 rectangle that bound the set of objects. 
 </summary>
 <param name="rectOriginalBounds">The original bounds of the selected object prior to 
 scaling.</param>
 <param name="fprcW">Percentage width to scale as single (float)</param>
 <param name="fprcH">Percentage height to scale as single (float)</param></member>
    <member name="M:GDIObjects.GDIObject.ToString">
      <summary>
 Returns a string representation of the object 
 </summary>
 <returns>A string containing the name of the object.</returns></member>
    <member name="M:GDIObjects.GDIObject.deserialize(GDIObjects.GDIDocument,GDIObjects.GDIPage)">
      <summary>
 Attempts to deserialize an object on a page. 
 </summary>
 <param name="doc">The parent document this object belongs to</param>
 <param name="pg">The page this object exists on.</param>
 <returns>A Boolean indicating if the object was deserialized.  For the generic case, this 
 is always true, but inheritors may have other restrictions. 
 For example, an object filled with a texturefill will return false if its associated 
 image cannot be located.</returns></member>
    <member name="M:GDIObjects.GDIObject.DrawSelectedObject(System.Drawing.Graphics,System.Single)">
      <summary>
 Draws an object in its selected state.  Selected is defined as being in the 
 selected set of objects.  Selected objects may need to draw hit handles or highlights. 
 Inheritors can override this method to draw handle custom selected look and feel 
 scenarios. 
 </summary>
 <param name="g">Graphics to draw to</param>
 <param name="fscale">The current zoom factor of the surface.</param></member>
    <member name="M:GDIObjects.GDIObject.HighlightObject(System.Drawing.Graphics,System.Single,System.Drawing.Color)">
      <summary>
 Draws highlights upon an object.  GDI+ Architect offers an object to highlight objects 
 as they are hit upon the surface in response to the mouse moving over them.  This is a 
 different look than selected, which is when an object has actually been chosen to participate 
 in the selected set. 
 </summary>
 <param name="g">A graphics context to draw the highlight to.</param>
 <param name="fscale">The surfaces current zoom factor.</param>
 <param name="highlightColor">Color set by the user to highlight objects with.</param></member>
    <member name="M:GDIObjects.GDIObject.BeginDraw(System.Drawing.Graphics)">
      <summary>
 Starts a draw operation for the object.  For the generic case, this checks 
 if a rotation container is needed and start this rotation prior to drawing. 
 </summary>
 <param name="g">A System.Drawing.Graphics context to draw against</param></member>
    <member name="M:GDIObjects.GDIObject.EndDraw(System.Drawing.Graphics)">
      <summary>
 Ends a draw operation for the current GDIObject. For the generic case, this 
 ends any rotation containers. 
 </summary>
 <param name="g">Graphics context to draw against</param></member>
    <member name="M:GDIObjects.GDIObject.endDrag">
      <summary>
 Called when an end drag operation is performed.  Inheritors can override this 
 method when they are interested in responding to an EndDrag statement. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObject.startDrag(System.Drawing.Point)">
      <summary>
 Begins a drag statement for a GDI object.  Inheritors can override 
 this method to perform custom drag implementations 
 </summary>
 <param name="ptObject">The origin point where the drag is starting.</param></member>
    <member name="M:GDIObjects.GDIObject.updateDrag(System.Drawing.Point)">
      <summary>
 Updates the drag of the object given a current drag point.  Inheritors can override 
 this method to perform custom placement based on a drag operation. 
 </summary>
 <param name="dragPoint">The last recorded point for a specific object.</param></member>
    <member name="P:GDIObjects.GDIObject.Rotation">
      <summary>
 Gets or sets the current rotation of a GDIObject. 
 </summary>
 <value>A single (float) indicating the amount of rotation from the origin.</value></member>
    <member name="P:GDIObjects.GDIObject.Name">
      <summary>
 Gets or sets the name of the GDIObject.  The name is used when code is emitted to 
 give a unique declaration, as well as shows in the property grid inside GDI+ Architect. 
 </summary>
 <value>The name of the object</value>
 <remarks>Notice that the Set portion of the property does quite a bit of work. 
 All of this extra code is to guarantee that the name is unique across other objects within 
 the GDIDocument. 
 </remarks></member>
    <member name="P:GDIObjects.GDIObject.Scope">
      <summary>
 Gets or sets the scope of the declaration of the object when code is emitted for it. 
 </summary>
 <value>An EnumScope value.  See EnumScope for more information.</value></member>
    <member name="P:GDIObjects.GDIObject.RotatedBoundPoints">
      <summary>
     ''' Returns an array of points representing the rectangular bounds of the object after rotation. 
 </summary>
 <value>An array of points bounding the object after rotation</value></member>
    <member name="P:GDIObjects.GDIObject.Bounds">
      <summary>
 Gets or sets the current bounds of the object (a rectangle that surrounds the 
 object).  Inheritors can optionally override this method to perform custom 
 operations. 
 </summary>
 <value>A rectangle with the bounds of the object.</value></member>
    <member name="P:GDIObjects.GDIObject.RotationPoint">
      <summary>
 Gets the point about which the object should be rotated.  This is typically 
 the center of the object, but inheritors can override this if there is a more 
 appropriate point to rotate the object about. 
 </summary>
 <value>A point about which to rotate the object.</value></member>
    <member name="M:GDIObjects.GDIObject.handlePointSet(System.Drawing.Point)">
      <summary>
 Allows inheritors to response to explicit point set operations (where a point 
 is selected and dragged to another location). 
 </summary>
 <param name="pt">The new location to set the point to.</param></member>
    <member name="M:GDIObjects.GDIObject.BoundPoints">
      <summary>
 Returns the points in the bounds rectangle as an array of points. 
 </summary>
 <returns>An array of points containing the four corner points of the bounds of the object.</returns></member>
    <member name="M:GDIObjects.GDIObject.getHandles(System.Single)">
      <summary>
 Returns a sit of hit handles.  Hit handles are usually pinned on the bounding box 
 around the object, but inheritors can override this method for more complex hit handle 
 operations. 
 </summary>
 <param name="fscale">The current surface scale.</param>
 <returns>An array of hithandles that hit testing on handles can be performed over.</returns></member>
    <member name="M:GDIObjects.GDIObject.HitTestRotatedHandles(System.Drawing.PointF,System.Single)">
      <summary>
 Performs a hit test on the handles of rotated objects 
 </summary>
 <param name="ptHit">The point to hit test against</param>
 <param name="fScale">The current zoom factor of the surface</param>
 <returns>The drag handle hit, or EnumDragHandles.None if no handle was hit</returns></member>
    <member name="M:GDIObjects.GDIObject.HitTestHandles(System.Drawing.PointF,System.Single)">
      <summary>
 Performs a hit test over an objects handles.  The handles are the points the user clicks to resize 
 objects along the surface.  For example, a rectangle GDIObject would simply have the hit handles along its 
 edges, whereas a complex curvature would have a collection of points along the curve. 
 </summary>
 <param name="ptHit">A point to test if it intersects with the hit rectangle</param>
 <param name="fScale">The current zoom factor on the interface.</param>
 <returns>An enumeration value indicating which type of handle was hit.  See EnumDragHandles for more information. </returns></member>
    <member name="M:GDIObjects.GDIObject.HitTest(System.Drawing.Rectangle)">
      <summary>
 Performs a hit test between a GDIObject and a specific rectangle. 
 </summary>
 <param name="rectObject">The rectangle to check for an overlap with the object for.  This 
 rectangle is express in object coordinates.</param>
 <returns>A Boolean indicating whether the rectangle and the hit test object intersected</returns></member>
    <member name="M:GDIObjects.GDIObject.HitTest(System.Drawing.PointF,System.Single)">
      <summary>
 Performs a hit test for the object given a current zoom factor and the hit test point. 
 </summary>
 <param name="ptHit">The hit test point</param>
 <param name="fScale">The current zoom scale</param>
 <returns>A Boolean indicating if the object was hit or not.</returns></member>
    <member name="M:GDIObjects.GDIObject.Dispose">
      <summary>
 Disposes of a GDIObject 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObject.Dispose(System.Boolean)">
      <summary>
 Disposes of the object.  At the GDIObject level this doesn't do anything, but 
 inheritors can override this method to perform custom disposal. 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not.</param></member>
    <member name="T:GDIObjects.GDIOpenPath">
      <summary>
 Represents an Open Path.  This class is juxtaposed to the GDIFilledShape class. 
 Whereas the GDIFilledShape represents a closed fillable shape, the OpenPath represents 
 objects where a fill is inappropriate such as with lines and open pen paths that 
 do not close. 
 </summary>
 <remarks>The key to the path based functionality in GDI+ Architect revolves around 
 having an array of points that make up the path and a complementary array of point 
 types which correspond to Drawing2D.PathPointType instances. 
 </remarks></member>
    <member name="F:GDIObjects.GDIOpenPath._Offsets">
      <summary>
 Array of points used to aid in drag operations.  Contains the offsets from the 
 original location of the path 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIOpenPath._HitIndex">
      <summary>
  Used to note the index position in the point array of a hit point. 
 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIOpenPath._NextnameID">
      <summary>
 The next valid integer name suffix (Openpath1, OpenPath2, ...) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIOpenPath._Points">
      <summary>
 An array of points that make up the path 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIOpenPath._PointTypes">
      <summary>
 An array of types of the points in the path.  These types correspond to 
 Drawing2D.PathPointType types.  For more information on the types of points 
 that can be used in a path, see this enumeration. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIOpenPath.#ctor(System.Drawing.Point)">
      <summary>
 Creates a new instance of a GDIOpenPath.  While the path is valid at this point 
 from a GDI+ standpoint, it isn't interesting until segments have been added, 
 since a path of a single point will not render 
 </summary>
 <param name="ptOrigin">The first point in the path</param></member>
    <member name="M:GDIObjects.GDIOpenPath.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIOpenPath to code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIOpenPath.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts a GDIOpenPath to SVG XML outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the open path to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the open path to.</param></member>
    <member name="M:GDIObjects.GDIOpenPath.NextName">
      <summary>
 Returns the next valid name for a new GDIOpenPath 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="P:GDIObjects.GDIOpenPath.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the word "Open Path"</value></member>
    <member name="M:GDIObjects.GDIOpenPath.resetPath">
      <summary>
 Resets the path, which means recreating the visually displayed graphics path. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIOpenPath.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
 Renders a GDIOpenPath for a specific draw mode. 
 </summary>
 <param name="g">The graphics context to draw to.</param>
 <param name="eDrawMode">The draw mode.  See the EnumDrawMode enumeration for more details.</param></member>
    <member name="M:GDIObjects.GDIOpenPath.handlePointSet(System.Drawing.Point)">
      <summary>
 Handles an explicit coordinate set on a point at the currently selected 
 index. 
 </summary>
 <param name="pt">The new location to place the point at.</param></member>
    <member name="M:GDIObjects.GDIOpenPath.getHandles(System.Single)">
      <summary>
 Returns the set of hit handles for the GDIOpenPath 
 as an array of HitHandle objects 
 </summary>
 <param name="fscale">The zoom factor of the surface the object resides on.</param>
 <returns>An array of hit handles to use in hit tests.</returns></member>
    <member name="P:GDIObjects.GDIOpenPath.HitHandleIndex">
      <summary>
 Gets the index of the last hit handle. 
 </summary>
 <value>An Int32 index location of the hit handle.</value></member>
    <member name="P:GDIObjects.GDIOpenPath.LastHitHandle">
      <summary>
 Returns the point in the array of points that make up the path that matches the 
 last hit handle.  This is the point at _HitIndex.  Since PointF is a structure, 
 to indicate that there is no point, an empty point is returned if there is no 
 current hit index. 
 </summary>
 <value>The point in the path that was last recorded as a hit or an empty point 
 if no handles have been hit.</value></member>
    <member name="M:GDIObjects.GDIOpenPath.HitTestHandles(System.Drawing.PointF,System.Single)">
      <summary>
 Performs a hit test over the handles in this object.  Returns the type of point 
 hit if there is a collision, or the empty value (EnumDragHandles.eNone) if there 
 is no collision. 
 </summary>
 <param name="ptHit">The point to hit test against.</param>
 <param name="fScale">The zoom factor of the surface this path is rendered on.</param>
 <returns>The type of point hit (see EnumDragHandles).  This is a bit of a stretch, 
 but it is here for consistency with other GDIObject hit tests.</returns></member>
    <member name="M:GDIObjects.GDIOpenPath.HitTest(System.Drawing.Rectangle)">
      <summary>
 Performs a hit test for the GDIOpenpath against a rectangle. 
 </summary>
 <param name="rect">A rectangle to compare intersection with the GDIOpenPath 
 against.</param>
 <returns>A Boolean indicating if the rectangle and the path intersect.</returns>
 <remarks>Notice that the path is widened here.  This is because the inherited line 
 for some reason will not perform a hit test correctly without increasing the thickness 
 of the path. 
 </remarks></member>
    <member name="M:GDIObjects.GDIOpenPath.HitTest(System.Drawing.PointF,System.Single)">
      <summary>
 Determines if the GDIOpenPath intersects with a specific point. 
 </summary>
 <param name="pt">The point to check intersection for.</param>
 <param name="fScale">The zoom factor of the surface the GDIOpenPath lies on.</param>
 <returns>A Boolean indicating if the given point at the given scale intersected 
 the GDIOpenPath.</returns></member>
    <member name="P:GDIObjects.GDIOpenPath.Rotation">
      <summary>
 Gets or Sets rotation - however - GDIOpenPaths are not allowed to be rotated at this 
 time.  To enforce this the property is made non browsable and always returns 0 
 for rotation. 
 </summary>
 <value>A rotation value, which is ignored.</value></member>
    <member name="P:GDIObjects.GDIOpenPath.DrawStroke">
      <summary>
 Returns a Boolean value indicating whether to draw the stroke.  In GDIOpenPaths, 
 the stroke is always drawn, so this property always returns true. 
 </summary>
 <value>A Boolean indicating whether to draw the stroke or not.</value></member>
    <member name="P:GDIObjects.GDIOpenPath.Points">
      <summary>
 Returns the array of pointF structures that make up the GDIOpenPath. 
 </summary>
 <value>An array of pointf values.</value></member>
    <member name="P:GDIObjects.GDIOpenPath.Types">
      <summary>
 Returns the types of points that make up the OpenPath 
 </summary>
 <value>An array of Byte values corresponding to Drawing2D.PathPointType 
 values.</value></member>
    <member name="P:GDIObjects.GDIOpenPath.Bounds">
      <summary>
 Gets or sets a rectangle that tightly bounds the points in the GDIOpenPath. 
 </summary>
 <value>A rectangle that bounds the points in the GDIOpenPath</value>
 <remarks>There is a lot of activity taking place in the Set portion of this statement. 
 This is because by setting this rectangle, each point in the path must be scaled 
 appropriately from its position in the current bounds to the new bounds. 
 </remarks></member>
    <member name="M:GDIObjects.GDIOpenPath.startDrag(System.Drawing.Point)">
      <summary>
 Starts a drag operation on a GDIOpenPath. 
 </summary>
 <param name="ptOrigin">The origin of the drag. 
 (where the mouse pointer went down)</param></member>
    <member name="M:GDIObjects.GDIOpenPath.updateDrag(System.Drawing.Point)">
      <summary>
 Updates a drag operation on a GDIOpenpath 
 </summary>
 <param name="dragPoint">The point at which the mouse currently resides.</param></member>
    <member name="M:GDIObjects.GDIOpenPath.createPath">
      <summary>
 Recreates the graphics path object used to draw the GDIOpenPath to a surface. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIOpenPath.UpdateCurveSegment(System.Drawing.PointF)">
      <summary>
 Updates the curvature being drawn to form a full Bezier curve. 
 </summary>
 <param name="ptCurvature">The end location the curvature point should reside at.</param>
 <remarks>
 If a curvature is being drawn, this makes sure all points needed to define the curve 
 are created.  In GDI+, a curve is composed of a series of point definitions 
 marked as Bezier (see the code below). 
 </remarks></member>
    <member name="M:GDIObjects.GDIOpenPath.GetClosedPath">
      <summary>
 Returns a closed path version of the GDIOpenPath.  This is used for when the user 
 has drawn an open path and then links to the start point in the path indicating a desire 
 to create a closed path instead of an open path. 
 </summary>
 <returns>A GDIClosedPath object.</returns></member>
    <member name="M:GDIObjects.GDIOpenPath.BeginCurveSegment(System.Drawing.PointF)">
      <summary>
 Starts the process of creating a curved segment.  This happens in response to the 
 user executing a "click and hold" which pulls the curve segment away from the initial 
 path and indicates a new curve segment should be created. 
 </summary>
 <param name="ptcurvature">The point at which to begin creating the curvature.</param></member>
    <member name="M:GDIObjects.GDIOpenPath.RenderTool(System.Drawing.Graphics)">
      <summary>
 Renders the open path in tool mode.  Used by the GDIPlus Architect project to draw the 
 tool without having to either expose Draw for the entire GDIObject hierarchy 
 or alternatively duplicate work in the GDIPlus Architect project 
 </summary>
 <param name="g">System.Drawing.Graphics context to draw against.</param></member>
    <member name="M:GDIObjects.GDIOpenPath.addLineSegment(System.Drawing.Point)">
      <summary>
 Adds a straight line segment to the current path. 
 </summary>
 <param name="ptSnapped">The point at which to create the segment.</param></member>
    <member name="T:GDIObjects.GDIRect">
      <summary>
 Renders a rectangle to the drawing surface.  Contains properties and methods related 
 to drawing rectangles, as well as drawing rounded rectangles depending on the rounded 
 property. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIRect._NextnameID">
      <summary>
 Next valid integer suffix for a GDIRect object (Rectangle1, Rectangle2, etc) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIRect._CornerRoundess">
      <summary>
 Percent the rectangle's corners are rounded by as a float (single). 
 </summary>
 <remarks>If the rectangle is rounded at all 
 (a value other than 0), both drawing and code emission are drastically 
 different.  Instead of using a rectangle, a graphics path is used with 
 rounded corners. 
 </remarks></member>
    <member name="M:GDIObjects.GDIRect.#ctor(System.Drawing.Rectangle)">
      <summary>
 Constructs a new instance of a GDIRect 
 </summary>
 <param name="rect">The rectangle to use to as the bounds of the GDIRect.</param></member>
    <member name="M:GDIObjects.GDIRect.emitRoundedRect(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIRect to code when the rectangle is rounded (where _CornerRoundess is not 0) 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIRect.emitRect(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIRect to code when there is no rounding (_CornerRoundess = 0) 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIRect.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIRect to code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIRect.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts a GDIRect to SVG XML and appends it to the outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the rect to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the rect to.</param></member>
    <member name="P:GDIObjects.GDIRect.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the word "Rectangle"</value></member>
    <member name="M:GDIObjects.GDIRect.NextName">
      <summary>
 Returns the next valid name for a new GDIRect 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="P:GDIObjects.GDIRect.Roundness">
      <summary>
 The amount to round the corner edges of the rectangle by 
 </summary>
 <value>A Single (float) indicating the extent of rounding.</value>
 <remarks>Rounding must be between 0 and 100. 
 </remarks></member>
    <member name="M:GDIObjects.GDIRect.createPath">
      <summary>
 Recreates the path used to draw the GDIRect to a surface. 
 </summary>
 <remarks>Notice that if rounding is not 0, a more complicated series of events 
 take place here in order to create the rectangle's rounded edges. 
 </remarks></member>
    <member name="M:GDIObjects.GDIRect.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
 Renders a rectangle to a specific graphics surface with a specific draw mode. 
 </summary>
 <param name="g">The graphics context to render the GDIRect to.</param>
 <param name="eDrawMode">The current drawing mode (See EnumDrawMode for more information).</param></member>
    <member name="T:GDIObjects.GDIShape">
      <summary>
 Virtual class that all GDIShapes inherit from, Provides common 
 functionality for all GDIShapes. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIShape._Path">
      <summary>
 Path used to render the shape to a drawing surface. 
 </summary>
 <remarks>Each GDIShape, regardless if 
 there is a simpler render method, is rendered to a path and then the path is 
 rendered to the drawing surface.  This allows for a single point of interaction for 
 drawing code and as you look at inheritors, it will become clearer what the benefit 
 of doing it this way is. 
 </remarks></member>
    <member name="F:GDIObjects.GDIShape._ResetPath">
      <summary>
 Indicates whether our _Path member is invalid and needs to be recreated. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIShape._Stroke">
      <summary>
 The stroke used to paint the shape. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIShape._DrawStroke">
      <summary>
 Whether to draw the stroke on the shape or not. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIShape.#ctor">
      <summary>
 Creates a new instance of a GDIShape 
 </summary>
 <remarks>Adds a handler to the OnStrokeUpdated event 
 </remarks></member>
    <member name="M:GDIObjects.GDIShape.OnStrokeUpdated(System.Object,System.EventArgs)">
      <summary>
 Responds to a stroke changed event by setting _ResetPath to true, signifying 
 that the path is invalid and the shape needs to be redrawn. 
 </summary>
 <remarks>This method would be private, but serialization requires delegate 
 handlers such as this to be marked as public or an exception will be thrown 
 when deserializing. 
 </remarks></member>
    <member name="M:GDIObjects.GDIShape.createPath">
      <summary>
 Implementers must override this to create the path that will be drawn to surfaces. 
 </summary>
    </member>
    <member name="P:GDIObjects.GDIShape.Stroke">
      <summary>
 Gets or sets the stroke used to draw the stroke portion of the shape (the outline) 
 </summary>
 <value>A GDIStroke.</value></member>
    <member name="P:GDIObjects.GDIShape.Bounds">
      <summary>
 Gets or sets the bounds of the shape.  The bounds is a rectangle containing the 
 shape in its non rotated position. 
 </summary>
 <value>A rectangle to make the bounds.</value>
 <remarks>The GDIShape overrides the Bounds property of the GDIObject so that it 
 can reset the path used to render the shape when the bounds is explicitly set. 
 </remarks></member>
    <member name="P:GDIObjects.GDIShape.DrawStroke">
      <summary>
 Gets or sets a value indicating whether to draw the stroke of this shape or not. 
 </summary>
 <value>A Boolean indicating whether to draw the stroke</value></member>
    <member name="M:GDIObjects.GDIShape.deserialize(GDIObjects.GDIDocument,GDIObjects.GDIPage)">
      <summary>
 Deserializes a shape.  Recreates the nonserialized _Path property based on the 
 shape's settings. 
 </summary>
 <param name="doc">The parent document being deserialized.</param>
 <param name="pg">The page this object exists on.</param>
 <returns>True.  By default GDIShapes do not expect deserialization issues.</returns></member>
    <member name="M:GDIObjects.GDIShape.resetPath">
      <summary>
 Resets the path used to render the shape to a graphics surface.  Inheritors can 
 override this method to do any custom operations they need to when the path 
 is being reset. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIShape.Dispose(System.Boolean)">
      <summary>
 Disposes of the Shape. 
 </summary>
 <param name="disposing">If managed resources are being disposed or not.</param></member>
    <member name="T:GDIObjects.GDIText">
      <summary>
 Contains everything necessary to render text to a GDI+ Architect surface as well 
 as provides emit functionality for Text. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIText._NextnameID">
      <summary>
 Holds the next valid integer suffix for text objects (Text1, Text2, etc) 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIText.#ctor(System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Boolean)">
      <summary>
  Creates a new instance of a GDIText object 
 </summary>
 <param name="Text">Text to place inside the object</param>
 <param name="Font">Font to use with the text</param>
 <param name="rectBounds">Initial bounds of the GDIText object</param>
 <param name="wrap">Whether the text should initially wrap or not to its bounds</param></member>
    <member name="M:GDIObjects.GDIText.NextName">
      <summary>
 Returns the next valid name for a new GDIText object 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="M:GDIObjects.GDIText.emitVariableWidth(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a variable width GDIText object 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIText.emitFixedWidth(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a fixed width GDIText object (one with an explicit width bounds). 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIText.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDIText object to code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDIText.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts  a GDIText bit to SVG XML and appends it to the outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the text to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the text to.</param></member>
    <member name="M:GDIObjects.GDIText.RenderTool(System.Drawing.Graphics)">
      <summary>
 Renders the text in tool mode.  Used by the GDIPlus Architect project to draw the 
 text tool without having to either expose Draw for the entire GDIObject hierarchy 
 or alternatively duplicate work in the GDIPlus Architect project 
 </summary>
 <param name="g">System.Drawing.Graphics context to draw against.</param></member>
    <member name="M:GDIObjects.GDIText.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
 Draws the GDIText to a surface for a specific drawmode. 
 </summary>
 <param name="g">The graphics surface to draw the GDIText object to.</param>
 <param name="eDrawMode">The mode (see EnumDrawMode) that indicates how to render the GDIText object.</param>
 <remarks>GDIText is one of the few objects that actually makes use of the EnumDrawMode.  Whereas most 
 objects draw the same regardless of the EnumDrawMode, a couple things are different with this 
 instance. 
 
 For printing, the font differ slightly than screen fonts depending on if they are measured in non screen 
 units (units besides Pixel and World). 
 
 For drawing to the surface, not only is the text rendered, but depending on user settings, borders are 
 drawn around the text as helpers for determining the position of the text. 
 </remarks></member>
    <member name="T:GDIObjects.GDITextBaseClass">
      <summary>
 Provides a base class for shared functionality for text objects on the surface. 
 At this time this is the GDIField and GDIText classes. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._Text">
      <summary>
 The string to draw to the surface 
 </summary>
 <remarks>This maps to sample text property for GDIFields and to text for GDIText. 
 </remarks></member>
    <member name="F:GDIObjects.GDITextBaseClass._Font">
      <summary>
 The fond the text should be drawn with 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._Alignment">
      <summary>
 The text alignment property of the text.  This specifies, given a bounds, 
 how to align text within the rectangular bounds.  This is only relevant when 
 the bounds on text are fixed. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._DefinedWidth">
      <summary>
 A Boolean indicating whether the GDIText object has a fixed width.  If the 
 object does have a fixed width, text wraps around the fixed width bounds and 
 the string alignment property comes into play.  Otherwise, text is drawn straight 
 from the top left horizontally until out of text to draw. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._ConsolidateFont">
      <summary>
 Whether to consolidate fonts for the  object with the 
 fonts of other objects. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._ConsolidateFormat">
      <summary>
 Whether to consolidate string formats for this text object with similar string formats 
 in the document. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._StringFormat">
      <summary>
 A string format object used to render text at runtime.  The actual behavior and 
 properties of this object are determined by settings. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._RectCharRanges">
      <summary>
 A series of character ranges used to hit test character positions when the 
 Text tool is used. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDITextBaseClass._InDrag">
      <summary>
  'Whether the object is currently in the middle of a drag operation or not. 
 </summary>
 <remarks> This is used to short circuit some of the more expensive 
 functionality to give a smoother drag as text is being moved until 
  its done being positioned. 
 
 </remarks></member>
    <member name="M:GDIObjects.GDITextBaseClass.#ctor(System.String,System.Drawing.Font,System.Drawing.Rectangle,System.Boolean)">
      <summary>
 Creates a new GDITextBaseClass object. 
 </summary>
 <param name="Text">The string to draw</param>
 <param name="Font">The font to draw the text with</param>
 <param name="rectBounds">A rectangle that bounds the text.  Note that the text 
 can extend vertically beyond the bounds of this rectangle.  </param>
 <param name="wrap">Whether to wrap to bounds (fixed width)or extend horizontally</param></member>
    <member name="P:GDIObjects.GDITextBaseClass.RotationPoint">
      <summary>
 Gets the point at which text is rotated. 
 </summary>
 <value>A System.Drawing.PointF about which text is rotated</value>
 <remarks>
 Whereas for most GDIObjects, the rotation point is simply the center point of the object, 
 this point depends on whether the wrap mode is set to fixed width or 
 variable width.  If it's fixed width, it is handled it 
 like every other GDIObject, rotating from the center.  If it's variable width, 
 the text is rotated from its top left point instead.</remarks></member>
    <member name="P:GDIObjects.GDITextBaseClass.Wrap">
      <summary>
 Gets or sets a value indicating if Text should wrap.  Wrap is a friendlier way to say 
 restrict to a fixed width bounds. 
 </summary>
 <value>A Boolean indicating whether to wrap.</value>
 <remarks>On true, defaults to alignment "near". 
 </remarks></member>
    <member name="P:GDIObjects.GDITextBaseClass.Bounds">
      <summary>
 Gets or set the rectangle that bounds the text object.  If this property is Set, 
 it will change a variable length text block to a fixed width text block. 
 </summary>
 <value>The new bounds of the text inheritor specified as a rectangle.</value>
 <remarks>Among other things, when set, this updates the character range array used to 
 highlight text on the surface. 
 </remarks></member>
    <member name="P:GDIObjects.GDITextBaseClass.ConsolidateFont">
      <summary>
 Determines whether to attempt to consolidate fonts at export time or not for this 
 object with other objects. 
 </summary>
 <value>A Boolean indicating whether to export fonts or not.</value></member>
    <member name="P:GDIObjects.GDITextBaseClass.ConsolidateStringFormat">
      <summary>
 Determines whether to attempt to consolidate string formats at export time or not for this 
 object with other objects. 
 </summary>
 <value>A Boolean indicating whether to export string formats or not.</value></member>
    <member name="P:GDIObjects.GDITextBaseClass.Text">
      <summary>
 Gets or sets the string of text that is drawn with this GDIText object. 
 </summary>
 <value>The string to draw.</value>
 <remarks>Notice that this forces a recalc of the bounds of the text object 
 when the property is Set. 
 </remarks></member>
    <member name="P:GDIObjects.GDITextBaseClass.StringFormat">
      <summary>
 Gets the string format used to draw the GDIText object. 
 </summary>
 <value>A StringFormat object used to render the GDIText object.</value></member>
    <member name="P:GDIObjects.GDITextBaseClass.Stroke">
      <summary>
 Returns the stroke used to stroke text, which is always nothing (null) since 
 text is only filled.  The property is here in order to make it not browsable inside 
 the property grid. 
 </summary>
 <value>A GDIStroke which is always nothing.</value></member>
    <member name="P:GDIObjects.GDITextBaseClass.Alignment">
      <summary>
 Gets or sets the alignment of text.  This property only has a purpose with fixed 
 width text.  Otherwise, text is always aligned top left. 
 </summary>
 <value>A valid StringAlignment</value></member>
    <member name="P:GDIObjects.GDITextBaseClass.Font">
      <summary>
 Gets or sets the font to draw the text with. 
 </summary>
 <value>The Font to draw text with.</value>
 <remarks>Notice that changing the font causes bounds to recalculate as well as 
 raising a fill updated event to interested listeners. 
 </remarks></member>
    <member name="P:GDIObjects.GDITextBaseClass.DrawFill">
      <summary>
 Whether to draw text "filled".  This is always true, since if it was false it 
 could leave blank text on the surface. To enforce this, it is marked with the 
 Browsable(False) attribute. 
 </summary>
 <value>A Boolean indicating whether to fill the text or not.</value></member>
    <member name="P:GDIObjects.GDITextBaseClass.DrawStroke">
      <summary>
 Whether to draw text stroked or not, which is irrelevant since 
 the text objects do not have a stroke.  To enforce this, it is marked with the 
 Browsable(False) attribute. 
 </summary>
 <value>A Boolean indicating whether to stroke text.</value></member>
    <member name="P:GDIObjects.GDITextBaseClass.Length">
      <summary>
 Returns the length of the string drawn to the surface as an int32. 
 </summary>
 <value>An integer containing the length of the string.</value></member>
    <member name="M:GDIObjects.GDITextBaseClass.deserialize(GDIObjects.GDIDocument,GDIObjects.GDIPage)">
      <summary>
 Deserializes a GDIText object for a specific document on a specific page. 
 </summary>
 <param name="doc">The GDIdocument the GDIText exists on.</param>
 <param name="pg">The GDIPage the GDIText exists on.</param>
 <returns>True.  Deserialization is always expected to be successful 
 for text inheritors.</returns></member>
    <member name="P:GDIObjects.GDITextBaseClass.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the word "Text Object"</value></member>
    <member name="M:GDIObjects.GDITextBaseClass.createPath">
      <summary>
 Overrided to shadow functionality.  Text objects do not use graphics paths to 
 render their content. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDITextBaseClass.endDrag">
      <summary>
 Ends a drag operation on GDIText. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDITextBaseClass.startDrag(System.Drawing.Point)">
      <summary>
 Starts a new drag operation on GDIText. 
 </summary>
 <param name="ptObject">The initial mouse point dragging started from.</param></member>
    <member name="M:GDIObjects.GDITextBaseClass.updateDrag(System.Drawing.Point)">
      <summary>
 Updates the position of the GDIText object during a drag operation. 
 </summary>
 <param name="dragPoint">The last mouse position where dragging occurred at.</param></member>
    <member name="M:GDIObjects.GDITextBaseClass.getFontInitializer(GDIObjects.ExportSettings)">
      <summary>
 Emits a font creation statement to code. 
 </summary>
 <param name="exportSettings">Current export settings for the document.</param>
 <returns>A CodeObjectCreateExpression that constructs the font.</returns></member>
    <member name="M:GDIObjects.GDITextBaseClass.getFontDisposal(System.String)">
      <summary>
 Gets the Font Disposal statement for code emits. 
 </summary>
 <param name="fontdeclare">The name of the font declared in code.</param>
 <returns>A CodeMethodInvokeExpression that disposes the font.</returns></member>
    <member name="M:GDIObjects.GDITextBaseClass.setVariableBoundingRect">
      <summary>
 Handles getting the bounds on variable length GDIText objects. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDITextBaseClass.calcbounds">
      <summary>
 Recalculates the bounding box as needed as well as updates the character 
 ranges used when highlighting characters on the surface. 
 </summary>
 <remarks>MeasureString has some issues, but it seems to work ok for the majority of 
 situations. 
 </remarks></member>
    <member name="M:GDIObjects.GDITextBaseClass.setupFormat">
      <summary>
 Builds the initial StringFormat object used to render text to the drawing surface. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDITextBaseClass.getSelectedCharRanges(System.Int32,System.Int32)">
      <summary>
 Gets a series of rectangleF structures that bound the characters from miTextStart index to 
 miTextEnd 
 </summary>
 <param name="miTextStart">The position to begin bounding characters at.</param>
 <param name="miTextEnd">The position to end bounding characters at.</param>
 <returns>An array holding a series of rectangles that bound the selected characters.</returns></member>
    <member name="M:GDIObjects.GDITextBaseClass.getRectangleForCharPos(System.Int32)">
      <summary>
 Returns a bounding rectangle for a character at position miTextIndex within the 
 string.  This bounding rectangle is used to highlight that character at the given 
 position. 
 </summary>
 <param name="miTextIndex">The index of the character to retrieve a bounding rectangle 
 for.</param>
 <returns>A rectangle bounding the character at the specific position.</returns></member>
    <member name="M:GDIObjects.GDITextBaseClass.CharIndexAtPoint(System.Drawing.PointF)">
      <summary>
 Checks whether a character in the drawn string intersects with a specific point. 
 If it does, returns the index of the character at the point. 
 </summary>
 <param name="pt">The pointF at which to test for a character at.</param>
 <returns>The index of the character at the point, the last character if the structure 
 is not empty, or 0 if there are no character ranges. </returns></member>
    <member name="M:GDIObjects.GDITextBaseClass.UpdateCharRanges">
      <summary>
 Update the array of character ranges that are used when highlighting and 
 manipulating individual characters on the drawing surface. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIImage">
      <summary>
 Virtual class that fillable shapes (shapes with a fill property such as 
 text, rectangles, etc.) inherit from.  Extracts common functionality for 
 fillable shapes into this virtual class. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIImage._IMG_FILTER">
      <summary>
 A filter string of valid image types to use on the GDI+ Architect surface 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIImage._Image">
      <summary>
 A temporary, nonserialized bitmap that is used to draw the bitmap to the surface. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIImage._XDPI">
      <summary>
 X DPI of the image 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIImage._YDPI">
      <summary>
 Y DPI of the image. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIImage._Sized">
      <summary>
 Boolean indicating whether the image has been manually sized or if the image 
 should use its default sizes. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIImage.GetImage">
      <summary>
 Required for inheritors to implement.  Inheritors as responsible for creating 
 images to be placed on the design surface. 
 </summary>
 <returns>An image that can be drawn to the GDI+ Architect surface</returns></member>
    <member name="T:GDIObjects.GDIImage.ImageFileChooser">
      <summary>
 Provides a simple dialogue for selecting a file. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIImage.ImageFileChooser.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
      <summary>
 Sets up the Imagefile chooser dialogue with the filter and default extension 
 </summary>
 <param name="openFileDialog">The dialogue to initialize.</param></member>
    <member name="M:GDIObjects.GDIImage.IsBitmap(System.String)">
      <summary>
 Determines if a file at a given full path is a bitmap or not. 
 </summary>
 <param name="sPath">The path to the file.</param>
 <returns>A Boolean indicating if the file is a bitmap or not.</returns></member>
    <member name="M:GDIObjects.GDIImage.ColorAtPoint(System.Drawing.Point)">
      <summary>
 Returns the color at a specific point in an image. 
 </summary>
 <param name="ptObject">A point translated to the object's coordinate space</param>
 <returns>The color at the point</returns></member>
    <member name="M:GDIObjects.GDIImage.RevertSize">
      <summary>
 Resets an image to its original size. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIImage.autoSize(System.Drawing.Image)">
      <summary>
 Sizes an image automatically based upon its DPI, resolution, and size. 
 </summary>
 <param name="img">The image to size.</param></member>
    <member name="M:GDIObjects.GDIImage.Draw(System.Drawing.Graphics,GDIObjects.EnumDrawMode)">
      <summary>
 Draws the image to the surface. 
 </summary>
 <param name="g">A graphics context to draw against.</param>
 <param name="eDrawMode">The current draw mode (to the surface, to a graphic, to a printer)</param></member>
    <member name="M:GDIObjects.GDIImage.Dispose(System.Boolean)">
      <summary>
 Disposes of a GDIImage.  Specifically releases the _Image member. 
 </summary>
 <param name="disposing">Whether unmanaged resources are being exposed or not.</param></member>
    <member name="T:GDIObjects.GDILinkedImage">
      <summary>
 Handles images where the path to an image file is specified in text. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDILinkedImage._ImageSource">
      <summary>
  The source of where the image is located when using GDI+ Architect. 
 This is different than _Path which is the path to the resource at runtime. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDILinkedImage._NextnameID">
      <summary>
 Returns the next valid integer suffix for a GDILinkedImage (Image1, Image2, etc) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDILinkedImage._Path">
      <summary>
 Used only in code export.  This is the path that the exported 
 image should be found at, depending on its runtime type. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDILinkedImage._RunTimeSource">
      <summary>
 Returns the runtime source type for generated code. 
 See EnumLinkType for more information. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDILinkedImage.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle,System.String)">
      <summary>
 Constructor to use for images that are being placed within a specific rectangle on a surface 
 rather than with its "natural" dimensions. 
 </summary>
 <param name="xDPI">the x DPI of the image</param>
 <param name="yDPI">The y DPI of the image</param>
 <param name="rect">A rectangle that defines the bounds of the image.</param>
 <param name="imgsrc">A full path to the image resource.</param></member>
    <member name="M:GDIObjects.GDILinkedImage.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
 Constructor for when the image should assume its natural size on a surface. 
 </summary>
 <param name="xDPI">The x DPI of the image</param>
 <param name="yDPI">The y DPI of the image.</param>
 <param name="posX">Top Left corner X position.</param>
 <param name="posY">Top Left corner Y position</param>
 <param name="imgSrc">A full path to the image resource.</param></member>
    <member name="M:GDIObjects.GDILinkedImage.GetImage">
      <summary>
 Returns a manipulatable bitmap from an image. 
 </summary>
 <returns>A bitmap that can be drawn against a GDI+ graphics object.</returns></member>
    <member name="M:GDIObjects.GDILinkedImage.deserialize(GDIObjects.GDIDocument,GDIObjects.GDIPage)">
      <summary>
 Deserializes an image resource.  Returns false if the image cannot be deserialized. 
 </summary>
 <param name="doc">The parent GDIDocument the image belongs to</param>
 <param name="pg">The page the image was saved on.</param>
 <returns>A Boolean indicating if deserialization was successful or not.</returns></member>
    <member name="M:GDIObjects.GDILinkedImage.NextName">
      <summary>
 Returns the next valid name for a new GDILinkedImage 
 </summary>
 <returns>A string containing the next valid name.</returns></member>
    <member name="P:GDIObjects.GDILinkedImage.ClassName">
      <summary>
 Returns a name used when displaying the class in the property browser. 
 </summary>
 <value>A string containing the word "Image"</value></member>
    <member name="P:GDIObjects.GDILinkedImage.ImageSource">
      <summary>
 Gets or sets the source where the image file to be used is located. 
 </summary>
 <value>A string representing a path to the resource.</value></member>
    <member name="P:GDIObjects.GDILinkedImage.Path">
      <summary>
 Returns a path to the resource to use in generated code to get at the resource 
 </summary>
 <value>A string representing the path to use to get at the resource</value>
 <remarks>This meaning of the value is dependent upon the RunTimeSource property. 
 - An absolute RunTimeSource means this will contain a full path to the resource. 
 - A relative RunTimeSource will contain a relative path from the application path. 
 - An embedded RunTimeSource means this will contain the path used to retrieve the embedded 
 resource. 
 </remarks></member>
    <member name="P:GDIObjects.GDILinkedImage.RuntimeSource">
      <summary>
 Gets or set how the generated code will find the linked image bitmap.  The options are 
 an EnumLinkType enumeration containing the choices of embedded, absolutepath, or 
 relative path. 
 </summary>
 <value>The runtime source specified for the object</value></member>
    <member name="M:GDIObjects.GDILinkedImage.toXML(System.Xml.XmlDocument,System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
 Converts a GDILinkedImage to SVG XML and appends it to the outgoing SVG code. 
 </summary>
 <param name="xmlDoc">The SVG document to append the image to.</param>
 <param name="defs">The definitions section of the SVG document.</param>
 <param name="group">The group to append the XML spec of the image to.</param></member>
    <member name="M:GDIObjects.GDILinkedImage.emit(System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a GDILinkedImage to code. 
 </summary>
 <param name="declarations">Declarations section of the outgoing class.</param>
 <param name="InitGraphics">The GDI+ Architect InitGraphics method. 
                            used to setup drawing</param>
 <param name="RenderGDI">The GDI+ Architect render graphics method. Where actual drawing 
 takes place.</param>
 <param name="DisposeGDI">The GDI+ Architect disposal method to dispose of 
 graphics resources that have .Dispose methods.</param>
 <param name="ExportSettings">The current export settings of the parent document.</param>
 <param name="Consolidated">The set of consolidated objects thus far. 
 Consolidated objects are objects that are identical and can optionally be declared 
 once instead of multiple times.</param></member>
    <member name="M:GDIObjects.GDILinkedImage.setupPath">
      <summary>
 Handles situations where the path of the runtime code must be adjusted due to 
 changes in the source image or changes in the Runtime source type. 
 </summary>
    </member>
    <member name="T:GDIObjects.History">
      <summary>
 Provides a container for the history of a specific document (a set of history items 
 recorded each time the document goes through a change that records undo or 
 redo information). 
 </summary>
    </member>
    <member name="F:GDIObjects.History._Disposed">
      <summary>
 Whether History has been disposed or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.History._HistoryIndex">
      <summary>
 Current history position  within the history 
 </summary>
    </member>
    <member name="F:GDIObjects.History._MaxUndoSteps">
      <summary>
 The number of allowed undo steps for this document.  This is set under preferences 
 in the user interface, and probably doesn't belong inside this object. 
 </summary>
    </member>
    <member name="M:GDIObjects.History.#ctor">
      <summary>
 Creates a new instance of history. 
 </summary>
    </member>
    <member name="P:GDIObjects.History.CurHistItem">
      <summary>
 Gets the history item at the current position within the document. 
 </summary>
 <value>The history item at the current position</value></member>
    <member name="P:GDIObjects.History.CurPos">
      <summary>
 Gets or sets the current history position. 
 </summary>
 <value>An integer within the bounds of the history collection</value>
 <remarks>This is not intended to be called directly by other classes in the project 
 with the exception of the GDIDocument class. 
 </remarks></member>
    <member name="P:GDIObjects.History.HistoryItems(System.Int32)">
      <summary>
 Indexes the history by a specific value 
 </summary>
 <param name="Index">The index value to return a history position at.</param>
 <value>Returns the history item at the specified index</value></member>
    <member name="M:GDIObjects.History.add">
      <summary>
 Shadows the add member of the CollectionBase to make it do nothing and hide it. 
 </summary>
    </member>
    <member name="M:GDIObjects.History.remove">
      <summary>
 Shadows the remove member of the CollectionBase to make it do nothing and hide it. 
 </summary>
    </member>
    <member name="M:GDIObjects.History.removeat">
      <summary>
 Shadows the removeat member of the CollectionBase to make it do nothing and hide it. 
 </summary>
    </member>
    <member name="M:GDIObjects.History.insert">
      <summary>
 Shadows the insert member of the CollectionBase to make it do nothing and hide it. 
 </summary>
    </member>
    <member name="M:GDIObjects.History.undo">
      <summary>
 "Undoes" a step of history. 
 </summary>
 <remarks>
 This method actually just moves the history position. 
 The caller, which is a GDIDocument, is actually responsible for raising the history 
 changed event which lets consumers know that history has been modified. 
 </remarks></member>
    <member name="M:GDIObjects.History.redo">
      <summary>
 "Redoes" a step of history. 
 </summary>
 <remarks>
 This method actually just moves history forward a step. 
 The caller, which is a GDIDocument, is actually responsible for raising the history 
 changed event which lets consumers know that history has been modified. 
 </remarks></member>
    <member name="M:GDIObjects.History.recordHistory(GDIObjects.GDIDocument,System.String)">
      <summary>
 Persists a moment of history information.  This means creating a history item 
 instance for the document and with the specific label and adding it to the history 
 object, and also a 
 </summary>
 <param name="doc">The document to persist into history</param>
 <param name="sLabel">The label to give the document.</param></member>
    <member name="M:GDIObjects.History.Dispose(System.Boolean)">
      <summary>
 Disposes of allocated history resources 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not</param></member>
    <member name="M:GDIObjects.History.Dispose">
      <summary>
 Disposes of the history 
 </summary>
    </member>
    <member name="T:GDIObjects.HistoryItem">
      <summary>
 Provides a container for a snapshot of history (for undo and redo).  Each time 
 history is recorded, a new history item is created and added to the History thus far. 
 This allows the user to undo and redo as well as select a specific history spot to 
 continue from. 
 </summary>
    </member>
    <member name="F:GDIObjects.HistoryItem._Disposed">
      <summary>
 Whether this history item has been disposed or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.HistoryItem._Snapshot">
      <summary>
 A byte array that holds the GDIDocument recoded in this history item. 
 </summary>
    </member>
    <member name="F:GDIObjects.HistoryItem._Name">
      <summary>
 Label that this history item uses to display itself in lists. 
 </summary>
    </member>
    <member name="M:GDIObjects.HistoryItem.#ctor(System.String,GDIObjects.GDIDocument)">
      <summary>
 Constructs a new history item instance. 
 </summary>
 <param name="sLabel">The name to give this history position</param>
 <param name="doc">The GDIDocument to be serialized into history.</param></member>
    <member name="M:GDIObjects.HistoryItem.ToString">
      <summary>
 Returns a sting representation of the history item object. 
 </summary>
 <returns>The label of the history item</returns></member>
    <member name="M:GDIObjects.HistoryItem.recordbitStream(GDIObjects.GDIDocument)">
      <summary>
 Serializes a GDIDocument to a bit stream for more compact storage within the 
 history item object. 
 </summary>
 <param name="doc">The document to serialize to history.</param></member>
    <member name="P:GDIObjects.HistoryItem.HistoricDocument">
      <summary>
 Retrieves the previously serialized document from this history item's bitstream. 
 </summary>
 <value>The GDIdocument recorded when this history item was created.</value></member>
    <member name="M:GDIObjects.HistoryItem.Dispose(System.Boolean)">
      <summary>
 Disposes of the history item. 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not.</param></member>
    <member name="M:GDIObjects.HistoryItem.Dispose">
      <summary>
 Default dispose method 
 </summary>
    </member>
    <member name="T:GDIObjects.ExportSettings">
      <summary>
 ExportSettings serves as a container for information relevant to exporting 
 documents to code but not directly related to the content and objects contained 
 in the document.  There is one ExportSetting object per document, and it is 
 persisted with the document. 
 </summary>
 <remarks /></member>
    <member name="F:GDIObjects.ExportSettings._NameSpace">
      <summary>
 Root namespace to use when exporting.  This is relevant for C# as well as when 
 resources are retrieved via embedded. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportSettings._DocumentType">
      <summary>
 The type of document to export (Graphics class or print document) 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportSettings._ClassName">
      <summary>
 The name of the class to create in the code file (e.g. class foo) 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportSettings._ExportLanguage">
      <summary>
 The language to export to (at this time this is only C# or VB.NET) 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportSettings._GDIFieldPrefix">
      <summary>
 Optional field prefix qualifier for exported field code. 
 </summary>
 <remarks>
 Note there is some confusion on naming here.  In this context a "field" 
 refers to a property wrapper for a GDIField.  See GDIField for more 
 information 
 </remarks></member>
    <member name="F:GDIObjects.ExportSettings._MemberPrefix">
      <summary>
 Optional member prefix qualifier for exported member code. 
 </summary>
 <remarks>The MemberPrefix applies only to private variables. 
 </remarks></member>
    <member name="F:GDIObjects.ExportSettings._OverrideConsolidateFill">
      <summary>
 Optional override of consolidating fills.  If true, all 
 fill consolidation will be ignored. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportSettings._OverrideConsolidateStroke">
      <summary>
 Optional override of consolidating stroke .  If true, all 
 stroke consolidation will be ignored. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportSettings._OverrideConsolidateFont">
      <summary>
 Optional override of consolidating fonts. If true, all 
 font consolidation will be ignored. 
 </summary>
    </member>
    <member name="F:GDIObjects.ExportSettings._OverrideConsolidateStringFormats">
      <summary>
 Optional override of consolidating string formats. If true, all 
 string format consolidation will be ignored. 
 </summary>
    </member>
    <member name="M:GDIObjects.ExportSettings.#ctor(System.String,GDIObjects.EnumDocumentTypes,System.String,GDIObjects.EnumCodeTypes)">
      <summary>
 Creates a new instance of an ExportSettings class. 
 </summary>
 <param name="sRootspace">The root namespace to use in code generation</param>
 <param name="doctype">The type of document that will be exported (graphics class or printdocument)</param>
 <param name="sClassname">The name of the generated class.</param>
 <param name="elanguage">The language to generated code in (C# or VB.NET).</param></member>
    <member name="P:GDIObjects.ExportSettings.OverrideConsolidateFill">
      <summary>
 Gets or sets whether to override consolidating fills.  If true, all 
 fill consolidation will be ignored. 
 </summary>
 <value>Boolean indicating whether to ignore fill consolidation settings</value></member>
    <member name="P:GDIObjects.ExportSettings.OverrideConsolidateStroke">
      <summary>
 Gets or sets whether to override consolidating strokes.  If true, all 
 stroke consolidation will be ignored. 
 </summary>
 <value>Boolean indicating whether to ignore stroke consolidation settings</value></member>
    <member name="P:GDIObjects.ExportSettings.OverrideConsolidateFont">
      <summary>
 Gets or sets whether to override consolidating fonts.  If true, all 
 font consolidation will be ignored. 
 </summary>
 <value>Boolean indicating whether to ignore font consolidation settings</value></member>
    <member name="P:GDIObjects.ExportSettings.OverrideConsolidateStringFormats">
      <summary>
 Gets or sets whether to override consolidating string formats.  If true, all 
 string format consolidation will be ignored. 
 </summary>
 <value>Boolean indicating whether to ignore string format consolidation settings</value></member>
    <member name="P:GDIObjects.ExportSettings.MemberPrefix">
      <summary>
 Gets or sets the prefix to preface local class declarations with. 
 </summary>
 <value>The prefix to use.</value></member>
    <member name="P:GDIObjects.ExportSettings.FieldPrefix">
      <summary>
 Gets or sets an optional prefix for outputted GDIField property wrappers. 
 </summary>
 <value>The prefix to use.</value></member>
    <member name="P:GDIObjects.ExportSettings.Language">
      <summary>
 Gets or sets the export language to use when generating code. 
 </summary>
 <value>An EnumCodeTypes enumeration (C# or VB.NET)</value></member>
    <member name="P:GDIObjects.ExportSettings.RootnameSpace">
      <summary>
 Gets or sets the root namespace.  This is used when embedded resources are to 
 be retrieved. 
 </summary>
 <value>The root namespace.</value></member>
    <member name="P:GDIObjects.ExportSettings.DocumentType">
      <summary>
 Gets or sets the target export document type (Graphics class or PrintDocument) 
 </summary>
 <value>An EnumDocumentTypes specifying the export doc type.</value></member>
    <member name="P:GDIObjects.ExportSettings.ClassName">
      <summary>
 Gets or sets the name of the class that code generation will produce. 
 </summary>
 <value>A string containing the desired name of the class</value></member>
    <member name="T:GDIObjects.GDIDocument">
      <summary>
 The primary GDI+ Architect document class. 
 This class is where all of the various GDI+ information winds up when it is saved 
 to a file.  This is also the class that is rendered to the drawing surface. 
 </summary>
 <remarks>
 Notice that the GDIDocument inherits from CollectionBase.  Each GDIDocument contains a collection of pages. 
 For the Graphics Class variant of the GDIDocument, there is a single page. 
 </remarks></member>
    <member name="F:GDIObjects.GDIDocument._Disposed">
      <summary>
 Whether the GDIDocument instance has been disposed 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._SelectedSet">
      <summary>
 Holds the set of selected objects in the GDIDocument. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._PrintDocument">
      <summary>
 A PrintDocument used when rendering the GDIDocument in print preview mode. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._PrintPageNumber">
      <summary>
 When print previewing with, the current page number 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._History">
      <summary>
 Used to maintain history for undo and redo operations. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._CurrentPage">
      <summary>
 The current page in the GDIDocument.  For graphics objects this is always the 
 same page since they contain only one page. 
 </summary>
 <remarks>This is serialized only for refreshing history in undo and redo. 
 When a GDIDocument is opened, it is always started at the first page. 
 </remarks></member>
    <member name="F:GDIObjects.GDIDocument._Portrait">
      <summary>
 Boolean indicating for the PrintDocument type GDIDocument where to display and 
 print in Portrait (true) or landscape (false). 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._ExportSettings">
      <summary>
 The GDIDocument's ExportSettings (see the ExportSettings class for more information) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._TextHint">
      <summary>
 The current Text hint of the GDIDocument. This maps to a 
 Drawing.Text.TextRenderingHint. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._SmoothingMode">
      <summary>
 The SmoothingMode of the GDIDocument.  This maps to a Drawing2D.SmoothingMode. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._FileName">
      <summary>
 The name of the binary GDI+ Architect file.  Set after a save or load. 
 Initially empty for new files. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._Path">
      <summary>
 The path of the binary GDI+ Architect file. Set after a save or load. 
 Initially empty for new files. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._Dirty">
      <summary>
 A Boolean indicating if the GDIDocument is dirty or not.  This is set to true every 
 time history is changed, and is set to false after a save operation. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._Saved">
      <summary>
 Whether the GDIDocument has ever been saved or not. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._NextPageIndex">
      <summary>
 The next valid page number for new pages added to this GDIDocument. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._PageArea">
      <summary>
 A rectangle representing the entire page size of the GDIDocument. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._PrintArea">
      <summary>
 A rectangle representing the printable area of the page (portion inside margins) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._BackColor">
      <summary>
 The GDIDocument's back color.  This isn't actually exported, but is cosmetic to help the design process. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._Guides">
      <summary>
 An arraylist containing the GDIGuides that belong to this GDIDocument. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIDocument.OnPageChanged">
      <summary>
 Invoked when a new page becomes the current page.  Used to 
 notify interested subscribers that a new page has become this 
 GDIDocument's current page. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIDocument.OnHistoryUpdated">
      <summary>
 Invoked when the GDIDocument history changes.  Used to notify interested 
 subscribers of changes to the state of the GDIDocument. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIDocument.OnSelectionChanged">
      <summary>
 Invoked when the set of selected objects (The SelectedSet) changes.  Used to 
 notify subscribers of changes to what is selected within a GDIDocument. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._PageChangedCallbacks">
      <summary>
 Holds the callbacks for when a new page becomes the current page. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._HistoryChangedCallbacks">
      <summary>
 Holds the callbacks for when history changes 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIDocument._SelectionChangedCallbacks">
      <summary>
 Holds the callbacks for when the current selection changes 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.#ctor(System.Drawing.Rectangle,GDIObjects.ExportSettings,System.Drawing.Text.TextRenderingHint,System.Drawing.Drawing2D.SmoothingMode)">
      <summary>
 Constructor for the graphics class style of GDIDocument 
 </summary>
 <param name="rectPixSize">The size requested for the graphics class object</param>
 <param name="ExportSettings">The current GDI+ export settings defined in the User interface</param>
 <param name="TextHint">The current GDI+ text hint settings defined in the user interface</param>
 <param name="SmoothingMode">The current GDI+ smoothing mode defined in the user interface</param>
 <remarks>This constructor variant is used when the user elects to create a new graphics class instead of a 
 page style GDIDocument. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.#ctor(System.Drawing.Printing.PrinterSettings,System.Drawing.Printing.PageSettings,GDIObjects.ExportSettings,System.Drawing.Text.TextRenderingHint,System.Drawing.Drawing2D.SmoothingMode)">
      <summary>
 Constructor for the PrintDocument style of GDIDocument 
 </summary>
 <param name="oprintersettings">Current printer settings defined in the user interface.</param>
 <param name="opagesettings">The current page settings defined in the user interface.</param>
 <param name="exportsettings">The current GDI+ export settings defined in the User interface</param>
 <param name="TextHint">The current GDI+ text hint settings defined in the user interface</param>
 <param name="SmoothingMode">The current GDI+ smoothing mode defined in the user interface</param>
 <remarks>This constructor is for when the user elects to create a new print style GDIDocument 
 (repeating pages of content). 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.SetResoByPageSettings(System.Drawing.Printing.PageSettings)">
      <summary>
 Sets the resolution of the GDIDocument based on PageSettings. 
 </summary>
 <param name="opagesettings">A PageSettings object to base settings off of.</param></member>
    <member name="M:GDIObjects.GDIDocument.SetResoByPrinterSettings(System.Drawing.Printing.PrinterSettings)">
      <summary>
 Sets the GDIDOcument properties based on a PrinterSettings object. 
 </summary>
 <param name="oPrinterSettings">The printer settings to apply the GDIDocument.</param></member>
    <member name="M:GDIObjects.GDIDocument.InsertGuide(GDIObjects.GDIGuide.EnumGuideDirection,System.Int32)">
      <summary>
 Adds a guide to the current GDIDocument 
 </summary>
 <param name="direction">The direction of the guide (horizontal or vertical)</param>
 <param name="xy">The XY position.  Whether this is an x or y value depends on 
 the value of the direction param.</param></member>
    <member name="M:GDIObjects.GDIDocument.revertSelectedImageSize">
      <summary>
 Reverts a selected image on the surface to its original sized dimensions. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.NameExists(GDIObjects.GDIObject,System.String)">
      <summary>
 Determines if a name is already in use.  Used to avoid name conflicts. 
 </summary>
 <param name="selectedobj">The object being compared for name violations</param>
 <param name="sSuggestedName">The potential name to give this object.</param>
 <returns>A Boolean indicating whether a collision has occurred</returns>
 <remarks>Notice the "If not selectedobj" clause in the code.  This verifies that a self comparison 
 is not taking place. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.NameExists(System.String)">
      <summary>
 Determines if a name is in use anywhere inside a particular GDIDocument. 
 </summary>
 <param name="sSuggestedName">The potential name to give this object.</param>
 <returns>A Boolean indicating whether the name is in use anywhere.</returns></member>
    <member name="M:GDIObjects.GDIDocument.SelectedSet_OnSelectionChanged(System.Object,System.EventArgs)">
      <summary>
 Notifies interested listeners that the set of selected objects has changed. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.setSelectionChangedCallBack(GDIObjects.GDIDocument.OnSelectionChanged)">
      <summary>
 Adds a listener to the OnSelectionChanged delegate. 
 </summary>
 <param name="cb">The callback to add</param></member>
    <member name="M:GDIObjects.GDIDocument.removeSelectionChangedCallBack(GDIObjects.GDIDocument.OnSelectionChanged)">
      <summary>
 Removes a listener from the OnSelectionChanged delegate. 
 </summary>
 <param name="cb">The callback to remove</param></member>
    <member name="M:GDIObjects.GDIDocument.GenerateCode">
      <summary>
 Gets the code represented by this GDIDocument 
 </summary>
 <returns>A string of code in the current language that will render this GDIDocument</returns>
 <remarks>There are two separate parent code generation classes, ExportPrint and ExportClass. 
 ExportPrint is for the multipage PrintDocument scenario. 
 ExportClass is for the graphics class style of document. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.QuickCode">
      <summary>
 Gets the quick code for the selected object 
 </summary>
 <returns>A string of code in the current language for the selected object.</returns></member>
    <member name="M:GDIObjects.GDIDocument.QuickSVG">
      <summary>
 Gets the SVG code for the currently selected object. 
 </summary>
 <returns>A string of SVG code for the currently selected object.</returns></member>
    <member name="M:GDIObjects.GDIDocument.DrawGuides(System.Drawing.Graphics,System.Single)">
      <summary>
 Renders guides to the current view at the current scale. 
 </summary>
 <param name="g">The current graphics object</param>
 <param name="fScale">The current scaled view of the surface.</param>
 <remarks>Notice that each guide is asked to draw itself.  This technique is used 
 frequently inside GDI+ Architect. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.setHistoryChangedCallBack(GDIObjects.GDIDocument.OnHistoryUpdated)">
      <summary>
 Sets up a call back when history has been changed. 
 </summary>
 <param name="cb">The call back to add.</param></member>
    <member name="M:GDIObjects.GDIDocument.removeHistoryChangedCallBack(GDIObjects.GDIDocument.OnHistoryUpdated)">
      <summary>
 Removes a listener from the history changed event 
 </summary>
 <param name="cb">The call back to remove</param></member>
    <member name="M:GDIObjects.GDIDocument.invokePageChanged">
      <summary>
 Wraps a call to the invokeListPageChanged delegate.  This delegate lets listeners 
 know that a page change event has occurred. 
 </summary>
 <remarks>Any number of the GDI+ Architect user interface panels may care about this 
 event.  The delegate architecture lets any number of interested listeners know 
 about this event. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.setPageChangeCallBack(GDIObjects.GDIDocument.OnPageChanged)">
      <summary>
 Adds a listener to the invokeListPageChanged event. 
 </summary>
 <param name="cb">The call back function that should be notified when this event occurs.</param></member>
    <member name="M:GDIObjects.GDIDocument.removePageChangeCallBack(GDIObjects.GDIDocument.OnPageChanged)">
      <summary>
 Removes a listener from the Pagechanged callback set 
 </summary>
 <param name="cb">The call back to remove.</param></member>
    <member name="M:GDIObjects.GDIDocument.invokeHistoryChangedCallBacks">
      <summary>
 Provides a wrapper for invoking call backs to listeners waiting for a history changed event. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.addNewPage">
      <summary>
 Adds a new page to the GDIDocument. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.SetCurrentPage(System.Int32)">
      <summary>
 Sets the current page given a page number. 
 </summary>
 <param name="iPageNum">The page number of the page to make the current page.</param></member>
    <member name="M:GDIObjects.GDIDocument.refreshPageNumbers">
      <summary>
 Renumbers pages when a page is added or removed. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.renamePage(GDIObjects.GDIPage,System.String)">
      <summary>
 Sets the name of a page to a new name.  This should be used when a page is being renamed 
 rather than setting it explicitly on the page object so history is recorded. 
 </summary>
 <param name="pg">The page to apply the new name to.</param>
 <param name="name">The new name to apply to the page.</param></member>
    <member name="M:GDIObjects.GDIDocument.deletePage(GDIObjects.GDIPage)">
      <summary>
 Deletes a page from a GDIDocument. 
 </summary>
 <param name="pg">The page to remove from set</param></member>
    <member name="M:GDIObjects.GDIDocument.HandlePaste(GDIObjects.GDIObjCol)">
      <summary>
 Handles a paste operation to the GDIDocument. 
 </summary>
 <param name="pasteCol">A collection of GDIObjects to paste to the current page.</param>
 <remarks>Notice that rather than copy objects, each goes through a deserialize process. 
 This is to detect name collisions and verify that external resources exist. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.Paste(System.Windows.Forms.IDataObject)">
      <summary>
 Handles a Paste command to this GDIDocument.  (from a paste or control V) 
 </summary>
 <param name="d">The object being pasted to the GDIDocument</param>
 <remarks>The first thing this method does is determine if it's one GDI+ Architect can 
 handle.  This could be expanded to allow all sorts of pasting to the surface 
 from various sources, but at this time it only allows for pasting of GDIObjects 
 to the surface. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.SelectOneItem(GDIObjects.GDIObject)">
      <summary>
 Select a specific single item in the GDIDocument.  This is only used by the property panel. 
 </summary>
 <param name="obj">The object to select</param></member>
    <member name="M:GDIObjects.GDIDocument.SelectAll">
      <summary>
 Selects all objects on the current page. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.PopulateHistoryList(System.Windows.Forms.ListBox)">
      <summary>
 Populates a windows list with this GDIDocument's history information.  By providing 
 this method, it allows history to stay in scope of the GDIObjects project. 
 </summary>
 <param name="lst">The list to populate with history information</param></member>
    <member name="M:GDIObjects.GDIDocument.redo">
      <summary>
 Moves one step forward in history if that step exists (a redo) 
 </summary>
 <remarks>Notice that the history changed call backs are invoked in response to a redo. 
 </remarks></member>
    <member name="P:GDIObjects.GDIDocument.HasRedo">
      <summary>
 Gets a value indicating if this GDIDocument has redo information 
 </summary>
 <value>A Boolean indicating if redo information is available.</value></member>
    <member name="P:GDIObjects.GDIDocument.HasUndo">
      <summary>
 Gets a value indicating if this GDIDocument has undo information 
 </summary>
 <value>A Boolean indicating if undo information is available.</value></member>
    <member name="M:GDIObjects.GDIDocument.setHistoryPos(System.Int32)">
      <summary>
 Sets the current history position.  This is intended to be used instead of directly 
 setting the history object's position so callbacks are invoked. 
 </summary>
 <param name="iIndex">The new index history to make current.</param></member>
    <member name="M:GDIObjects.GDIDocument.recordHistory(System.String)">
      <summary>
 Records an instance of history information to the history object. 
 </summary>
 <param name="sLabel">A textual description of the history point.</param></member>
    <member name="M:GDIObjects.GDIDocument.refreshHistoricView">
      <summary>
 Loads the current GDIDocument from history and makes each page of the historic GDIDocument 
 belong to the current GDIDocument, in effect, undoing or redoing operations. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.undo">
      <summary>
 Undoes a single history step. 
 </summary>
 <remarks>This call wraps the history object's undo method.  It then refreshes this 
 history and redraws the GDIDocument to the current surface.  Finally it invokes 
 the historychanged callback for listeners. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.prDoc_PrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
      <summary>
 Used to render print preview of the GDIDocument. 
 </summary>
 <param name="sender">invoker</param>
 <param name="e">PrintPageEventArgs</param>
 <remarks>This is attached to the onPrintPage 
 handler of the printdocument object contained in this project.  Each time it is called 
 it  asks the current page to print itself and then increments if there are more pages. 
 When it is out of pages this method sets the PrintPageEventArgs.HasMorePages argument 
 to false indicating printing has been completed. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.Preview">
      <summary>
 Invokes a print preview of the current GDIDocument to a preview window. 
 </summary>
 <remarks>Most of this rather long method is setting up a Preview dialogue to show 
 the print preview.  There is one thing to note, however.  Immediately before the 
 preview, this method turns off the draw borders and stores their original values. 
 
 This technique allows the application to use virtually the same code 
 for drawing to print surface as everywhere else in the application. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.deserialize(System.String)">
      <summary>
 Recreates a GDI+ Architect GDIDocument from a previously saved file. 
 </summary>
 <param name="sfilename">A full path to the file.</param>
 <remarks>
 This method is only called from "LoadFromFile".  The reason this is separate is that LoadFromFile 
 is a shared (static) method. Once the generic LoadFromFile is done with its work, this method sets up 
 the instance related properties. 
 </remarks></member>
    <member name="M:GDIObjects.GDIDocument.LoadFromFile(System.String)">
      <summary>
 Loads a previously saved GDI+ Architect GDIDocument from a saved file. 
 </summary>
 <param name="fileName">A full path to the file</param>
 <returns>A deserialized GDI+ Architect GDIDocument</returns></member>
    <member name="M:GDIObjects.GDIDocument.Save">
      <summary>
 Saves an existing GDIDocument to its original location.  Sets dirty to false. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.SaveToFile">
      <summary>
 Saves the GDIDocument to a file, overwriting any existing file at the location. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIDocument.SaveAs(System.String,System.String)">
      <summary>
 Saves the GDIDocument to the given path with the given file name. 
 </summary>
 <param name="sPath">The path to save the file to.</param>
 <param name="sFileName">The filename to save the file as.</param>
 <remarks>Notice this sets _Saved to true, indicating if the GDIDocument has ever been saved. 
 </remarks></member>
    <member name="P:GDIObjects.GDIDocument.Guides">
      <summary>
 Gets the current set of GDIGuides belonging to this document as an arraylist. 
 </summary>
 <value>An arraylist containing this document's guides</value></member>
    <member name="P:GDIObjects.GDIDocument.BackColor">
      <summary>
 Gets or sets the GDIDocument's back color. 
 </summary>
 <value>The GDIDocument's back color.</value>
 <remarks>
 BackColor is only used at design time and is not exported to code. 
 </remarks></member>
    <member name="P:GDIObjects.GDIDocument.ExportSettings">
      <summary>
 Gets the GDIDocument's current ExportSettings.  ExportSettings are properties 
 relevant to the export process. 
 </summary>
 <value>The current ExportSettings defined for the GDIDocument.</value>
 <remarks>Export settings are initially set in the constructor. 
 </remarks></member>
    <member name="P:GDIObjects.GDIDocument.PrintableArea">
      <summary>
 Gets or sets the printable area of the GDIDocument (the area inside the margins) 
 </summary>
 <value>The printable area of the page expressed as a rectangle</value></member>
    <member name="P:GDIObjects.GDIDocument.FileName">
      <summary>
 Gets or sets the filename that this GDIDocument will be saved with. 
 </summary>
 <value>A string containing the file name.</value>
 <remarks>This also sets the exportsetting's property class name if it has not previously 
 been set. 
 </remarks></member>
    <member name="P:GDIObjects.GDIDocument.Item(System.Int32)">
      <summary>
 Gets the GDIPage at index within the GDIDocument's collection. 
 </summary>
 <param name="index">The index at which to retrieve a page.</param>
 <value>A GDIPage at the corresponding index.</value></member>
    <member name="P:GDIObjects.GDIDocument.FullPath">
      <summary>
 Gets the full path to the file that this GDIDocument has been saved as / loaded from 
 </summary>
 <value>A string containing the path to the file</value>
 <remarks>Notice that path and the filename are concatenated to get this. 
 Also note this is readonly. This enforces that this information can only be changed 
 in response to a Save. 
 </remarks></member>
    <member name="P:GDIObjects.GDIDocument.Dirty">
      <summary>
 Gets a value indicating whether the GDIDocument is dirty. 
 </summary>
 <value>A Boolean indicating whether the GDIDocument is dirty</value></member>
    <member name="P:GDIObjects.GDIDocument.Saved">
      <summary>
 Gets a value indicating whether the GDIDocument has ever been saved. 
 </summary>
 <value>A Boolean indicating whether the GDIDocument has been saved</value></member>
    <member name="P:GDIObjects.GDIDocument.Selected">
      <summary>
 Gets this GDIDocument's set of currently selected objects. 
 </summary>
 <value>A set of GDIObjects that are currently selected.</value></member>
    <member name="M:GDIObjects.GDIDocument.AddObjectToPage(GDIObjects.GDIObject,System.String)">
      <summary>
 Appends a GDIObject to the current page.  Records history for this append with the 
 label specified in historylabel. 
 </summary>
 <param name="obj">The GDIObject inheritor to append to the page</param>
 <param name="historyLabel">A label to append to the history marker.</param></member>
    <member name="P:GDIObjects.GDIDocument.CurrentPage">
      <summary>
 Gets or sets the current page. 
 </summary>
 <value>A GDIPage object (see the GDI Page class for more information)</value></member>
    <member name="P:GDIObjects.GDIDocument.SmoothingMode">
      <summary>
 Gets or sets the GDIDocument's smoothing mode 
 </summary>
 <value>A smoothing mode used for pretty rendering.</value></member>
    <member name="P:GDIObjects.GDIDocument.TextRenderingHint">
      <summary>
 Gets or sets the GDIDocument's text rendering hint. 
 </summary>
 <value>A TextRenderingHint used to render text to the surface.</value></member>
    <member name="P:GDIObjects.GDIDocument.CurHistoryPos">
      <summary>
 Gets or sets the history objects current position 
 </summary>
 <value>An integer representing the history object's current position.</value>
 <remarks>Notice when this function is "Set", it invokes 
 the historychanged callbacks so that listeners will be informed. 
 </remarks></member>
    <member name="P:GDIObjects.GDIDocument.RectPageSize">
      <summary>
 Gets or sets a value indicating the current page size.  In graphic class style 
 documents this is equivalent to the entire drawing surface. 
 </summary>
 <value>A rectangle representing the current page size</value></member>
    <member name="M:GDIObjects.GDIDocument.Dispose(System.Boolean)">
      <summary>
 Disposes of the GDIDocument, removing handlers and releasing resources. 
 </summary>
 <param name="disposing">Whether unmanaged resources are being disposed or not.</param></member>
    <member name="M:GDIObjects.GDIDocument.Dispose">
      <summary>
 Calls the custom dispose method. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIGuide">
      <summary>
 Represents a guide (alignment line) on the GDI+ Architect drawing surface. 
 </summary>
    </member>
    <member name="T:GDIObjects.GDIGuide.EnumGuideDirection">
      <summary>
 Whether the guide is horizontal or vertical. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIGuide.EnumGuideDirection.eHoriz">
      <summary>A horizontal guide</summary>
    </member>
    <member name="F:GDIObjects.GDIGuide.EnumGuideDirection.eVert">
      <summary>A vertical guide</summary>
    </member>
    <member name="F:GDIObjects.GDIGuide._Direction">
      <summary>
 Whether the guide is horizontal or vertical. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIGuide._XY">
      <summary>
 The guide's position.  (Y value for a vertical guide, X for a horizontal) 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIGuide.Draw(System.Drawing.Graphics,System.Single)">
      <summary>
 Renders a guide to the drawing surface. 
 </summary>
 <param name="g">The current graphics context</param>
 <param name="fScale">the current zoom</param></member>
    <member name="P:GDIObjects.GDIGuide.Direction">
      <summary>
 Gets or sets the direction of the Guide. 
 </summary>
 <value>An enumeration representing whether the guide is drawn horizontal or vertical.</value></member>
    <member name="P:GDIObjects.GDIGuide.XY">
      <summary>
 Gets or sets the XY position of the guide (Y for vertical, X for horizontal). 
 </summary>
 <value>An integer representing the position of the guide</value></member>
    <member name="T:GDIObjects.GDIObjCol">
      <summary>
 Maintains an ordered collection of GDIObjects and provides helper methods to work with 
 sets of GDIObjects.  The order of the collection determines Z-Order when rendering to 
 surfaces. 
 </summary>
 <remarks>The GDIObjCol maintains a collection GDIObjects for both GDIPages and 
 the SelectedSet object which holds the sets of selected objects. 
 </remarks></member>
    <member name="F:GDIObjects.GDIObjCol._DataFormat">
      <summary>
 Used for clipboard operations.  Sets the dataformat for the GDIObjCol.  This is 
 later used to identify whether a resource is pastable into the project 
 or not. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.#ctor">
      <summary>
 Creates a new instance of a GDIObjCol.  Sets up the dataformat provider. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.DrawSelected(System.Drawing.Graphics,System.Single)">
      <summary>
 Draws the collection as selected (with appropriate handles, highlight, etc). 
 </summary>
 <param name="g">Drawing context to draw the set to</param>
 <param name="fscale">Current surface zoom factor.</param></member>
    <member name="M:GDIObjects.GDIObjCol.highlightObject(System.Drawing.Graphics,GDIObjects.GDIObject,System.Single,System.Drawing.Color)">
      <summary>
 Highlights a specific object.  This arguably doesn't belong in the collection's 
 implementation since it uses no local members nor has much to do with a collection 
 of objects. 
 </summary>
 <param name="g">The graphics context being draw to.</param>
 <param name="obj">The object to highlight</param>
 <param name="fscale">The current scale factor.</param>
 <param name="highlightColor">The highlight color to highlight with.</param></member>
    <member name="M:GDIObjects.GDIObjCol.DrawObjects(System.Drawing.Graphics,System.Single,GDIObjects.EnumDrawMode)">
      <summary>
 Draws a set of objects to the specific graphics surface. 
 </summary>
 <param name="g">The graphics context to draw to.</param>
 <param name="fScale">the current scale factor of the surface.</param>
 <param name="mode">The draw mode. See EnumDrawMode for more information.</param></member>
    <member name="M:GDIObjects.GDIObjCol.PrintObjects(System.Drawing.Graphics,GDIObjects.GDIDocument)">
      <summary>
 Prints the set of objects to a PrintDocument. 
 </summary>
 <param name="g">Graphics context to print the objects to.</param>
 <param name="doc">parent GDIDocument.  Smoothing and TextHint are retrieved 
 from this.</param></member>
    <member name="M:GDIObjects.GDIObjCol.Nudge(System.Int32,System.Int32)">
      <summary>
 Nudges all of the items in the set by an x and/or a y increment. 
 </summary>
 <param name="x">The x amount to nudge by</param>
 <param name="y">The y amount to nudge by</param>
 <remarks>X and Y can be negative. 
 </remarks></member>
    <member name="M:GDIObjects.GDIObjCol.extentBottom">
      <summary>
 Returns the bottom most point in the set 
 </summary>
 <returns>The bottom most point in the set</returns></member>
    <member name="M:GDIObjects.GDIObjCol.extentTop">
      <summary>
 Returns the top most point in the set 
 </summary>
 <returns>The top most point in the set</returns></member>
    <member name="M:GDIObjects.GDIObjCol.extentRight">
      <summary>
 Returns the right most point in the set 
 </summary>
 <returns>The right most point in the set</returns></member>
    <member name="M:GDIObjects.GDIObjCol.extentLeft">
      <summary>
 Returns the left most point in the set 
 </summary>
 <returns>The left most point in the set</returns></member>
    <member name="M:GDIObjects.GDIObjCol.insertionSortY">
      <summary>
 Sorts all of the items in the set by their Y values, returning a new sorted set. 
 </summary>
 <returns>A set of GDIObjects sorted by their Y positions</returns>
 <remarks>Within a GDIObjCol, objects are sorted by their Z Order values.  Prior to 
 distributing heights, thee need to be ordered by their Y positions.  This method returns 
 the objects in such a way that height distribution can be performed. 
 </remarks></member>
    <member name="M:GDIObjects.GDIObjCol.InsertionSortX">
      <summary>
 Sorts all of the items in the set by their X values, returning a new sorted set. 
 </summary>
 <returns>A set of GDIObjects sorted by their X positions</returns>
 <remarks>Within a GDIObjCol, objects are sorted by their Z Order values.  Prior to 
 distributing widths, they nede to be ordered by their X positions.  This method returns 
 the objects in such a way that width distribution can be performed. 
 </remarks></member>
    <member name="M:GDIObjects.GDIObjCol.rightMostPoint(System.Drawing.Point[])">
      <summary>
 Returns the right most point in array of points. 
 </summary>
 <param name="ptArr">Array to find the right most point in.</param>
 <returns>The point with the greatest X value</returns></member>
    <member name="M:GDIObjects.GDIObjCol.bottomMostPoint(System.Drawing.Point[])">
      <summary>
 Returns the bottom most point in array of points. 
 </summary>
 <param name="ptArr">Array to find the bottom most point in.</param>
 <returns>The point in the set that has the greatest Y value</returns></member>
    <member name="M:GDIObjects.GDIObjCol.topMostPoint(System.Drawing.Point[])">
      <summary>
 Returns the top most point in array of points. 
 </summary>
 <param name="ptArr">Array to find the top most point in.</param>
 <returns>The point with the smallest Y value in the array.</returns></member>
    <member name="M:GDIObjects.GDIObjCol.leftMostPoint(System.Drawing.Point[])">
      <summary>
 Returns the left most point in array of points. 
 </summary>
 <param name="ptArr">Array to find the left most point in.</param>
 <returns>The point with the smallest X value in the array.</returns></member>
    <member name="M:GDIObjects.GDIObjCol.distributeHeights(System.Drawing.Rectangle)">
      <summary>
 Distributes the heights of selected objects along a specific height bounds. 
 </summary>
 <param name="bounds">Rectangle from which the height and Y is extracted to distribute 
 bounds.</param></member>
    <member name="M:GDIObjects.GDIObjCol.distributeHeights">
      <summary>
 Distributes heights within the set in relation to each other. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.distributeWidths(System.Drawing.Rectangle)">
      <summary>
 Distributes the widths of items in the set in relation to a specific width 
 </summary>
 <param name="bounds">A rectangle from which the width and X values are extracted 
 in order to distribute widths.</param></member>
    <member name="M:GDIObjects.GDIObjCol.distributeWidths">
      <summary>
 Distributes widths within a set in relation to the set's members. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.alignLeft(System.Int32)">
      <summary>
 Aligns the set of objects to a specific left position 
 </summary>
 <param name="left">The left position to align to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.alignLeft">
      <summary>
 Aligns the set of objects to the leftmost object in the set. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.alignRight(System.Int32)">
      <summary>
 Aligns the set of objects to a specific right most position. 
 </summary>
 <param name="right">The right value to align to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.alignRight">
      <summary>
 Aligns the set of objects to the right most point in the set 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.alignBottom(System.Int32)">
      <summary>
 Aligns the set of objects to a specific bottom most value. 
 </summary>
 <param name="bottom">The bottom most value to align to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.alignBottom">
      <summary>
 Aligns the set of objects to the bottom most point in the set. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.alignTop(System.Int32)">
      <summary>
 Aligns the set of objects topmost to a specific fixed value 
 </summary>
 <param name="top">The fixed value to align objects to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.alignTop">
      <summary>
 Aligns all objects to the topmost point in the selected set. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.makeHeightEqual(System.Int32)">
      <summary>
 Sets the objects in the set's height to a specific value 
 </summary>
 <param name="height">The height value to set the object's height to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.makeHeightEqual(GDIObjects.GDIObject)">
      <summary>
 Sets the height of the objects in the set the same as a specified key object. 
 </summary>
 <param name="keyobj">The object upon which to base the other object's heights.</param></member>
    <member name="M:GDIObjects.GDIObjCol.makeWidthEqual(System.Int32)">
      <summary>
 Makes the width of the set equal to a specific width value. 
 </summary>
 <param name="width">The width value to set the width of the objects to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.makeWidthEqual(GDIObjects.GDIObject)">
      <summary>
 Makes the items in a set have equal width to a specific key object. 
 </summary>
 <param name="keyobj">The key object to set widths to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.makeHeightWidthEqual(System.Drawing.Size)">
      <summary>
 Makes the items in a set have equal height and width to a specified size structure. 
 </summary>
 <param name="size">Size structure (height/width elements) to size to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.makeHeightWidthEqual(GDIObjects.GDIObject)">
      <summary>
 Makes the items in a set have equal height and width to a specified GDIObject. 
 </summary>
 <param name="keyobj">The object which to set equal height and width to.</param></member>
    <member name="M:GDIObjects.GDIObjCol.alignHorizCenter">
      <summary>
 Aligns the set of objects along a vertical center. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.alignHorizCenter(System.Int32)">
      <summary>
 Aligns the set along a specified horizontal center 
 </summary>
 <param name="horizCenter">A specific value to align upon</param></member>
    <member name="M:GDIObjects.GDIObjCol.alignVertCenter(System.Int32)">
      <summary>
 Aligns the set along a specified vertical center 
 </summary>
 <param name="verticalcenter">A specific value to align upon</param></member>
    <member name="M:GDIObjects.GDIObjCol.alignVertCenter">
      <summary>
 Aligns the set along the vertical center of the set. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIObjCol.getBoundObjects(System.Drawing.Rectangle)">
      <summary>
 Returns the subset of objects within the collection that intersect with a specific 
 rectangle.  The method name is somewhat of a misnomer. 
 </summary>
 <param name="boundrect">The rectangle to test against for intersection</param>
 <returns>A subset of objects bound by the rectangle.</returns>
 ----------------------------------------------------------------------------- 
 ----------------------------------------------------------------------------- 
 <summary>
 Returns the subset of objects within the collection that intersect with a specific 
 rectangle.  The method name is somewhat of a misnomer. 
 </summary>
 <param name="boundrect">The rectangle to test against for intersection</param>
 <returns>A subset of objects bound by the rectangle.</returns></member>
    <member name="M:GDIObjects.GDIObjCol.FindObjectAtPoint(System.Drawing.PointF,System.Single)">
      <summary>
 Hit tests all items in the object collection against a specific point, returning 
 the first hit object, which is the topmost in the zorder. 
 </summary>
 <param name="pt">The point to test against </param>
 <param name="fscale">The scale of the drawing surface.</param>
 <returns>The topmost object hit, or Nothing (null) if no objects are hit.</returns></member>
    <member name="M:GDIObjects.GDIObjCol.sendBackward(GDIObjects.GDIObjCol)">
      <summary>
 Sends a subset of this collection's items to the back (behind other items in the set). 
 </summary>
 <param name="gdiObjCol">The subset of items to send backward</param></member>
    <member name="M:GDIObjects.GDIObjCol.bringForward(GDIObjects.GDIObjCol)">
      <summary>
 Brings a subset of the collections items forward (before other items in the set) 
 </summary>
 <param name="gdiObjCol">The collection of items to bring forward.</param></member>
    <member name="M:GDIObjects.GDIObjCol.sendToback(GDIObjects.GDIObjCol)">
      <summary>
 Sends a set of selected items to the back (behind all other items in the set) 
 </summary>
 <param name="gdiObjCol">The set of items to send to the back.</param></member>
    <member name="M:GDIObjects.GDIObjCol.bringToFront(GDIObjects.GDIObjCol)">
      <summary>
 Brings a set of selected items to the front (before all other items in the set) 
 </summary>
 <param name="gdiObjCol">The set of items to send to the back.</param></member>
    <member name="M:GDIObjects.GDIObjCol.deserialize(GDIObjects.GDIDocument,GDIObjects.GDIPage)">
      <summary>
 Deserializes a set of items. 
 </summary>
 <param name="doc">The parent document this set belongs to.</param>
 <param name="pg">The page this set belongs to.</param></member>
    <member name="P:GDIObjects.GDIObjCol.Format">
      <summary>
 Returns a data format provider used for clipboard operations on GDIObjCol objects. 
 </summary>
 <value>A Format consumable by clip board operations to identify the GDIObjCol.</value></member>
    <member name="M:GDIObjects.GDIObjCol.HasItems">
      <summary>
 Returns a Boolean indicating if there are any items in this particular set. 
 </summary>
 <returns>A Boolean indicating if any items exist in the set.</returns></member>
    <member name="P:GDIObjects.GDIObjCol.Item(System.Int32)">
      <summary>
 Sets up the indexer on the GDIObjCol to return GDIObjects instead of objects. 
 </summary>
 <param name="index">Positional index of the object to retrieve.</param>
 <value>Returns the GDIObject at the position of index</value></member>
    <member name="M:GDIObjects.GDIObjCol.Add(GDIObjects.GDIObject)">
      <summary>
 Adds a GDIObject to the collection 
 </summary>
 <param name="value">The object to add</param></member>
    <member name="M:GDIObjects.GDIObjCol.AddRange(GDIObjects.GDIObject())">
      <summary>
 Adds a range of objects to the gdiobjcol 
 </summary>
 <param name="value">An array of GDIObjects to add</param></member>
    <member name="M:GDIObjects.GDIObjCol.AddRange(GDIObjects.GDIObjCol)">
      <summary>
 Adds a range of objects to the collection from another GDIObjCol 
 </summary>
 <param name="value">The GDIObjCol to extract objects from</param></member>
    <member name="M:GDIObjects.GDIObjCol.Contains(GDIObjects.GDIObject)">
      <summary>
 Returns a Boolean indicating if a particular GDIObject exists in this collection 
 instance. 
 </summary>
 <param name="value">The GDIObject to test for existence in the collection</param>
 <returns>A Boolean indicating if the GDIObject exists in the collection or not.</returns></member>
    <member name="M:GDIObjects.GDIObjCol.Remove(GDIObjects.GDIObject)">
      <summary>
 Removes a specific GDIObject from the underlying collection 
 </summary>
 <param name="value">A GDIObject to remove from the list</param></member>
    <member name="M:GDIObjects.GDIObjCol.Remove(GDIObjects.GDIObjCol)">
      <summary>
 Removes a set of objects from the collection 
 </summary>
 <param name="gdiObjects">The objects within another GDIObjCol 
 to remove from the collection</param></member>
    <member name="T:GDIObjects.GDIPage">
      <summary>
 Represents an instance of a page inside a GDIDocument. 
 While the graphics class type of  uses this, it is limited to a single page. 
 The print document class contains multiple GDIPages, one per page on the surface. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIPage._Disposed">
      <summary>
 Whether this page has been disposed or not 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIPage._GDIObjects">
      <summary>
 The collection of GDIObject contained in this page ( 
 Read GDIObjCol as GDIObject Collection) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIPage._Name">
      <summary>
 The name of the page.  This is an arbitrary value.  If not set the page will 
 render itself in lists as "Page X" where X is the page number. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIPage._PageNumber">
      <summary>
 The page number of this page. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIPage.#ctor(System.Int32)">
      <summary>
 Constructor for a GDIPage 
 </summary>
 <param name="iNum">The page number of the page.</param></member>
    <member name="P:GDIObjects.GDIPage.Name">
      <summary>
 Gets or sets the name of this page.  Solely used for a more friendly interface 
 in GDI+ Architect. 
 </summary>
 <value>A string with the page name.</value></member>
    <member name="P:GDIObjects.GDIPage.PageNum">
      <summary>
 Gets or sets this page's page number. 
 </summary>
 <value>Integer value representing the page number</value></member>
    <member name="P:GDIObjects.GDIPage.GDIObjects">
      <summary>
 Gets the collection of objects contained on this page 
 </summary>
 <value>The collection of objects on the page, a GDIObjCol (GDI Object Collection) </value></member>
    <member name="M:GDIObjects.GDIPage.ToBitmap(System.Drawing.Graphics,GDIObjects.GDIDocument)">
      <summary>
 Renders the page to a bitmap. 
 All of the work for this is done inside the page's object collection (GDIObjCol) 
 collection. 
 </summary>
 <param name="gbmp">A graphics context to write the page to, created from a bitmap.</param>
 <param name="doc">The parent GDIDocument this page belongs to.</param></member>
    <member name="M:GDIObjects.GDIPage.DrawToMetafile(System.Drawing.Graphics,GDIObjects.GDIDocument)">
      <summary>
 Renders the page to a meta file. 
 All of the work for this is done inside the page's object collection (GDIObjCol) 
 
 </summary>
 <param name="gMeta">A graphics context to write the page to.  Created from a metafile.</param>
 <param name="doc">The parent GDIDocument this page belongs to.</param></member>
    <member name="M:GDIObjects.GDIPage.Print(System.Drawing.Graphics,GDIObjects.GDIDocument)">
      <summary>
 Renders the page to a print document. 
 All of the work for this is done inside the page's object collection (GDIObjCol) 
 </summary>
 <param name="g">A graphics context to write the page to. 
 This is created from a print document.</param>
 <param name="doc">The parent GDIDocument this page belongs to.</param></member>
    <member name="M:GDIObjects.GDIPage.ToString">
      <summary>
 Returns a string representation of the page. 
 </summary>
 <returns>A string containing the name of the page</returns></member>
    <member name="M:GDIObjects.GDIPage.Dispose(System.Boolean)">
      <summary>
 Disposes of a page. 
 </summary>
 <param name="disposing">If unmanaged resources are being disposed or not</param></member>
    <member name="M:GDIObjects.GDIPage.Dispose">
      <summary>
 Default dispose implementation 
 </summary>
    </member>
    <member name="T:GDIObjects.GraphicsManager">
      <summary>
 Holds methods that are required for graphic operations in multiple places within 
 the project but don't conform to the object model.  Basically a utility class for 
 graphic related operations. 
 </summary>
    </member>
    <member name="F:GDIObjects.GraphicsManager._tempWin">
      <summary>
 Temporary window used to retrieve graphics for objects that need a graphics context to 
 perform operations but would not have one in the normal flow. For example, the text object 
 needs to measure character ranges, which  is a method of the graphics objects. 
 </summary>
    </member>
    <member name="F:GDIObjects.GraphicsManager._GraphicsContainer">
      <summary>
 A graphics container used to draw in scale mode as needed. 
 </summary>
    </member>
    <member name="M:GDIObjects.GraphicsManager.getTempGraphics">
      <summary>
 Gets a graphics context for operations that need one to do their work. 
 </summary>
 <returns>A System.Drawing.Graphics context based on the current system settings.</returns>
 <remarks>Ideally this would not be necessary, however, there are times when the 
 structure of the System.Drawing Namespace requires a graphics context when it is 
 difficult to get at one, for example region operations and measuring character ranges. 
 </remarks></member>
    <member name="F:GDIObjects.GraphicsManager._OriginalMatrix">
      <summary>
 A matrix used to store the original graphics scale mode before scale mode 
 changes. 
 </summary>
    </member>
    <member name="M:GDIObjects.GraphicsManager.BeginScaleMode(System.Drawing.Graphics,System.Single)">
      <summary>
 Begins a scaled graphics container.  Assumes a call will later be made to EndScaleMode. 
 </summary>
 <param name="g">A System.Drawing.Graphics object</param>
 <param name="fScale">The scale for the current view.</param>
 <remarks>This is called when an object that references the document 
 needs a custom scaling container.  It allows the object to maintain coordinates independent from any 
 particular zoom setting. 
 </remarks></member>
    <member name="M:GDIObjects.GraphicsManager.EndScaleMode(System.Drawing.Graphics)">
      <summary>
 Stops drawing under the current scale, closing the graphics container. 
 Should be called after BeginScaleMode. 
 </summary>
 <param name="g">The current graphics object</param></member>
    <member name="M:GDIObjects.GraphicsManager.ImageFromAbsolutePath(System.String)">
      <summary>
 Given an absolute path to an image, returns a bitmap of the image. 
 </summary>
 <param name="sAbsPath">An absolute path to the resource to retrieve.</param>
 <returns>A bitmap containing the resource specified in sAbsPath</returns></member>
    <member name="M:GDIObjects.GraphicsManager.AttemptLoadImage(System.String)">
      <summary>
 Attempts to load an image from a file for situations where the file couldn't 
 originally be found.  In other words, if there is a link to an image 
 (texture resource or external bitmap resource) that has been moved or deleted, 
 this method prompts the user to select an alternate image source to replace 
 the missing resource with. 
 </summary>
 <param name="sMSG">A string containing the reason the user is being prompted 
 for an image file.</param>
 <returns>A path to an alternate file chosen by the user, or an empty string 
 if the user elected not to choose a file.</returns></member>
    <member name="T:GDIObjects.HitHandle">
      <summary>
 A simple container for handle related information. 
 </summary>
 <remarks>Hit handles can be either part of a curvature or an edge to a rectangle. 
 </remarks></member>
    <member name="T:GDIObjects.HitHandle.EnumHandletypes">
      <summary>
 Represents the type of a hit handle.  A normal handle is a typical edge point on 
 a rectangle, whereas a curve handle is part of a Bezier curve on a path. 
 </summary>
    </member>
    <member name="F:GDIObjects.HitHandle.EnumHandletypes.eNormal">
      <summary>eNormal represents a typical handle such as the edge of a rectangle 
 or a standard point along the path.</summary>
    </member>
    <member name="F:GDIObjects.HitHandle.EnumHandletypes.eCurvePoint">
      <summary>eCurvePoint represents a handle that is part of a Bezier curve</summary>
    </member>
    <member name="F:GDIObjects.HitHandle._HandleArea">
      <summary>
 A rectangleF (a rectangle composed of floats) representing the area of the handle 
 </summary>
    </member>
    <member name="F:GDIObjects.HitHandle._HandleType">
      <summary>
 The type of handle (part of a curvature or a normal edge handle). This is used 
 to paint points differently depending on the purpose of the point. 
 </summary>
    </member>
    <member name="M:GDIObjects.HitHandle.#ctor(System.Drawing.RectangleF,GDIObjects.HitHandle.EnumHandletypes)">
      <summary>
 Constructor for a new hit handle 
 </summary>
 <param name="rHandleRect">The rectangle representing the hit area</param>
 <param name="eHandleType">The type of the handle (part of a curvature or normal edge)</param></member>
    <member name="M:GDIObjects.HitHandle.Contains(System.Drawing.PointF)">
      <summary>
 Returns a value indicating whether this handle contains a specified point.  This 
 is where the actual hit test is performed. 
 </summary>
 <param name="pt">The handle point to test.</param>
 <returns>A </returns></member>
    <member name="P:GDIObjects.HitHandle.HandleRect">
      <summary>
 The rectangle this hit handle is valid within 
 </summary>
 <value>A rectangleF structure containing the area of the handle</value></member>
    <member name="P:GDIObjects.HitHandle.HandleType">
      <summary>
 The type of the hit handle (curvature point or a normal edge style handle) 
 </summary>
 <value>EnumHandleTypes which is the type of handle.</value></member>
    <member name="T:GDIObjects.SelectedSet">
      <summary>
 Represents the set of currently selected GDIObjects in a GDIDocument. 
 </summary>
 <remarks>There is a bit of ambiguity on the real difference between the purpose 
 of the SelectedSet and the GDIObjCol.  The only real difference is that selected set 
 is designed specifically to work with selected objects, whereas the GDIObjCol is intended 
 to work with any set of GDIObjects. 
 </remarks></member>
    <member name="F:GDIObjects.SelectedSet._Document">
      <summary>
 A back reference to the GDIDocument the SelectSet belongs to. 
 </summary>
    </member>
    <member name="F:GDIObjects.SelectedSet._DragStartPoint">
      <summary>
 A point used to note where a drag operation on the surface began.  This point is used 
 to determine how much offset from the initial position the set of objects have been 
 dragged 
 </summary>
    </member>
    <member name="F:GDIObjects.SelectedSet._DragBoundsCurrent">
      <summary>
 The current bounds (a rectangle) of the selected set of objects prior 
 to a drag operation 
 </summary>
    </member>
    <member name="F:GDIObjects.SelectedSet._DragBoundsStart">
      <summary>
 The initial bounds (a rectangle) of the selected set of objects prior 
 to a drag operation 
 </summary>
    </member>
    <member name="F:GDIObjects.SelectedSet._SelectedObjects">
      <summary>
 The set of selected objects.  This is stored as a GDIObjCol which is a class 
 used by GDIPages as well as the SelectedSet object to manipulate groups of GDIObjects. 
 </summary>
    </member>
    <member name="E:GDIObjects.SelectedSet.SelectionChanged" />
    <member name="T:GDIObjects.SelectedSet.SelectionChangedEventHandler">
      <summary>
 Raised when the set of selected objects changes.  Notifies the parent document 
 which in turn broadcasts the event to interested subscribers. 
 </summary>
    </member>
    <member name="M:GDIObjects.SelectedSet.#ctor(GDIObjects.GDIDocument)">
      <summary>
 Creates a new SelectedSet. 
 </summary>
 <param name="doc">A document to which the SelectedSet belongs.</param>
 <remarks>There is one and only one SelectedSet object per GDIDocument 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.QuickCode">
      <summary>
 Generates code for the selected set of objects 
 </summary>
 <returns>A string of code that will render the selected objects.</returns></member>
    <member name="M:GDIObjects.SelectedSet.QuickSVG">
      <summary>
 Generates SVG for the selected set of objects. 
 </summary>
 <returns>A string of XML code that will render the selected objects.</returns></member>
    <member name="M:GDIObjects.SelectedSet.prettyFormat(System.Xml.XmlDocument)">
      <summary>
 Pretty formats the outgoing SVG XML. 
 </summary>
 <param name="voXML">a DOM of xml to pretty format.</param>
 <returns>The XML content of the DOM with pretty formatting.</returns></member>
    <member name="M:GDIObjects.SelectedSet.Transform(System.Single,System.Single)">
      <summary>
 Transforms a set of selected objects by a width and height scale factor 
 </summary>
 <param name="fPercWidth">The width percent to transform by</param>
 <param name="fPercHeight">The height percent to transform by</param></member>
    <member name="M:GDIObjects.SelectedSet.setFont(System.Drawing.Font)">
      <summary>
 Sets the font property of all selected objects, where appropriate 
 (text or field objects) to a common value. 
 </summary>
 <param name="Font">The new font to use</param></member>
    <member name="M:GDIObjects.SelectedSet.setStroke(GDIObjects.GDIStroke)">
      <summary>
 Sets the stroke on all relevant selected objects to a common stoke. 
 </summary>
 <param name="stroke">The shared stroke to set for the objects.</param>
 <remarks>Only records history if an object was actually affected. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.setFill(GDIObjects.GDIFill)">
      <summary>
 Sets the fill on all relevant selected objects to a common fill. 
 </summary>
 <param name="fill">The shared fill to set for all relevant objects (fillable objects) 
 in the set.</param>
 <remarks>Only records history if an object was actually affected. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.Cut">
      <summary>
 Places the set of selected objects in "cut mode".  This removes them from the 
 current canvas and populates the clipboard with the set. 
 </summary>
    </member>
    <member name="M:GDIObjects.SelectedSet.Copy">
      <summary>
 Copies the set of selected objects to the clipboard. 
 </summary>
    </member>
    <member name="M:GDIObjects.SelectedSet.PasteAttributes(System.Windows.Forms.IDataObject)">
      <summary>
 Implements a paste attributes feature.  Paste attributes takes the common set 
 of attributes from a specific GDIObject and applies them to selected objects. 
 </summary>
 <param name="d">DataObject that should contain a GDIObject if the command 
 is relevant.</param>
 <remarks>There's a lot of code in this procedure, but it's more complex than it 
 looks.  The majority of the code checks whether attributes can be pasted.  The 
 second bit of code assigns the matching attributes to the selected set. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.AlignVertCenter(GDIObjects.EnumAlignMode)">
      <summary>
 Aligns the selected objects along a vertical center 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.AlignHorizCenter(GDIObjects.EnumAlignMode)">
      <summary>
 Aligns the selected objects along a horizontal center 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.AlignRight(GDIObjects.EnumAlignMode)">
      <summary>
 Aligns the selected objects rightmost depending on the alignmode setting. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.alignLeft(GDIObjects.EnumAlignMode)">
      <summary>
 Aligns the selected objects leftmost depending on the alignmode setting. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.DistributeHeights(GDIObjects.EnumAlignMode)">
      <summary>
 Attempts to evenly distribute the heights of selected objects. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.distributeWidths(GDIObjects.EnumAlignMode)">
      <summary>
 Attempts to evenly distribute the widths of the objects. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.MakeSameSizeWidth(GDIObjects.EnumAlignMode)">
      <summary>
 Sets objects to the same width depending on the settings of the alignmode argument. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.MakeSameSizeHeight(GDIObjects.EnumAlignMode)">
      <summary>
 Sets objects to the same height depending on the settings of the alignmode argument. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.MakeSameSizeBoth(GDIObjects.EnumAlignMode)">
      <summary>
 Makes objects have the same height and width depending on settings in the alignmode 
 argument. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.AlignTop(GDIObjects.EnumAlignMode)">
      <summary>
 Aligns a set of objects topmost depending on settings in the alignmode argument. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.AlignBottom(GDIObjects.EnumAlignMode)">
      <summary>
 Aligns a set of objects bottommost depending on settings in the alignmode argument. 
 </summary>
 <param name="alignmode">The current align to settings (margin/canvas/normal) from 
 the user interface project.</param></member>
    <member name="M:GDIObjects.SelectedSet.SelectOneItem(GDIObjects.GDIObject)">
      <summary>
 Selects a single specified item. 
 </summary>
 <param name="obj">The object to select</param></member>
    <member name="M:GDIObjects.SelectedSet.NotifyDragEnd">
      <summary>
 Lets the selected set know that a drag operation has been completed.  This 
 method stops drag operations for each of its items as well. 
 </summary>
 <remarks>The history for this operation is recorded in the user interface layer. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.Nudge(System.Int32,System.Int32)">
      <summary>
 Nudges the set of selected objects by an x and/or y factor. 
 </summary>
 <param name="x">The X amount to nudge</param>
 <param name="y">The Y amount to nudge</param></member>
    <member name="M:GDIObjects.SelectedSet.SetSelection(GDIObjects.GDIObjCol)">
      <summary>
 Explicitly sets the selection set to a new set of objects 
 </summary>
 <param name="newSelection">The set of objects to select.</param></member>
    <member name="M:GDIObjects.SelectedSet.initDragPoint(System.Drawing.Point)">
      <summary>
 Starts a drag operation for the selected set of objects.  The point parameter 
 is the initial point to begin dragging from. 
 </summary>
 <param name="ptSnapped">The point of reference from which the drag operation 
 began.</param></member>
    <member name="M:GDIObjects.SelectedSet.updateDragRect(System.Drawing.Point)">
      <summary>
 Updates the drag rectangle based upon the most recent mouse cursor point. 
 </summary>
 <param name="pt">The point at which the cursor was recorded</param>
 <remarks>
 What this math says is that the current drag rectangle is 
 the difference between where the drag started and the current point minus the 
 initial mouse down point. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.UpdateDraggedPositions(System.Drawing.Point)">
      <summary>
 Updates the drag positions of each object in the selected set. 
 </summary>
 <param name="pt">The point at which the last mouse position was recorded.</param>
 <remarks>Each object is responsible for maintaining its own drag points as they 
 are moved upon the designer surface.  This method allows those objects to update 
 their internal drag points and set their new bounds accordingly. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.handleSelection(System.Drawing.Rectangle,System.Boolean)">
      <summary>
 Sets the selected set given a drag rectangle and whether the shift key is currently down. 
 </summary>
 <param name="rect">The rect of being dragged across to select objects</param>
 <param name="bShiftDown">A Boolean indicating if the shift key is being held down during this 
 operation.</param>
 <remarks>
  What this is designed to do is, given a selected set and a rectangle of new selections, 
 set the selection set according to rules that most graphic applications use in these situations. 
 Typically this means inverting the selection, unless the  shift key is down, 
 which implies adding to the collection. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.DrawSelected(System.Drawing.Graphics,System.Single)">
      <summary>
 Draws the selected objects.  Simply asks each object in the set to draw itself 
 as "Selected" (with highlights and handle points as appropriate). 
 </summary>
 <param name="g">Graphics to draw against </param>
 <param name="fScale">The current zoom factor of the page.</param></member>
    <member name="M:GDIObjects.SelectedSet.BringToFront">
      <summary>
 Brings the set of selected objects forward-most on the canvas. 
 </summary>
    </member>
    <member name="M:GDIObjects.SelectedSet.SendToBack">
      <summary>
 Sends the set of selected objects to the back of the canvas. 
 </summary>
    </member>
    <member name="M:GDIObjects.SelectedSet.SendBackward">
      <summary>
 Sends the set of selected objects back a step. 
 </summary>
    </member>
    <member name="M:GDIObjects.SelectedSet.BringForward">
      <summary>
 Sends the set of selected objects forward a step 
 </summary>
    </member>
    <member name="P:GDIObjects.SelectedSet.LastSelected">
      <summary>
 Returns the last item in the selected set of objects.  Sometimes the application 
 needs to know this when the user performs an action that expects a single object 
 but multiple objects are selected.  This helps provide that ability. 
 </summary>
 <value>The last selected object in the selected set.</value></member>
    <member name="P:GDIObjects.SelectedSet.Count">
      <summary>
 Returns the count of selected objects. 
 </summary>
 <value>An integer containing the total count of the objects.</value></member>
    <member name="P:GDIObjects.SelectedSet.CurrentBounds">
      <summary>
 Returns a rectangle that bounds all of the selected objects. 
 </summary>
 <value>A rectangle that bounds the selected objects.</value></member>
    <member name="M:GDIObjects.SelectedSet.DeselectAll">
      <summary>
 Deselects all of the selected objects on the canvas. 
 </summary>
    </member>
    <member name="M:GDIObjects.SelectedSet.handleNewSelection(GDIObjects.GDIObject,System.Boolean)">
      <summary>
 Handles a selected object that has been hit on the surface. 
 </summary>
 <param name="hitObject">The object to handle a hit for</param>
 <param name="bShiftDown">Whether the Shift key is being held during this hit test</param>
 <remarks>
 The reason the Selected Set handles this action is because 
 different selections happen depending on whether the selected object is in the set. 
 For example, the object is removed from the set if it is already 
 in the set and the user is holding shift down. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.DeleteAll">
      <summary>
 Deletes all of the currently selected objects from the page / document. 
 </summary>
    </member>
    <member name="P:GDIObjects.SelectedSet.Bounds">
      <summary>
 Returns the Bounds of all selected objects. 
 </summary>
 <value>A rectangle that tightly encapsulates all of the selected objects. 
 </value>
 <remarks>Note how these bounds are computed.  Each object is added 
 to a graphics path and then the bounds of the path are computed and returned. 
 The only tricky part is rotating each object by its rotation value as they are 
 added to the path. 
 </remarks></member>
    <member name="M:GDIObjects.SelectedSet.ToArray">
      <summary>
 Converts the set of selected objects to an array.  This is used to allow 
 the visual studio property grid control to display the selected objects. 
 </summary>
 <returns>An array of GDIObjects</returns></member>
    <member name="M:GDIObjects.SelectedSet.Contains(GDIObjects.GDIObject)">
      <summary>
 Checks whether a specific GDIObject is in the set of selected objects. 
 </summary>
 <param name="value">The GDIObject to test for participation in the selected set.</param>
 <returns>A Boolean indicating whether the item is contained within the selected set.</returns></member>
    <member name="T:GDIObjects.Session">
      <summary>
 Brokers application wide global settings relevant to the GDIObject project and 
 the GDIPlus Architect project. 
 </summary>
    </member>
    <member name="F:GDIObjects.Session._Tracing">
      <summary>
 Whether to write debug tracing or not 
 </summary>
    </member>
    <member name="F:GDIObjects.Session._Settings">
      <summary>
 Sundry local settings 
 </summary>
    </member>
    <member name="F:GDIObjects.Session._Stroke">
      <summary>
 Current in use application wide stroke 
 </summary>
    </member>
    <member name="F:GDIObjects.Session._Fill">
      <summary>
 Currently in use application wide Fill 
 </summary>
    </member>
    <member name="F:GDIObjects.Session._DocumentManager">
      <summary>
 Manager for the current document's properties and settings 
 </summary>
    </member>
    <member name="M:GDIObjects.Session.#ctor">
      <summary>
 Constructs a new instance of the global manager 
 </summary>
    </member>
    <member name="T:GDIObjects.Session.StrokeChanged">
      <summary>
 Delegate to notify interested parties that the session's stroke has been changed 
 </summary>
    </member>
    <member name="T:GDIObjects.Session.FillChanged">
      <summary>
 Event to notify listeners that the session's fill has been changed. 
 </summary>
    </member>
    <member name="F:GDIObjects.Session._StrokeChangedInvokeList">
      <summary>
 Local instance of the stroke changed delegate 
 </summary>
    </member>
    <member name="F:GDIObjects.Session._FillChangedInvokeList">
      <summary>
 Local instance of the fill changed delegate 
 </summary>
    </member>
    <member name="M:GDIObjects.Session.setStrokeChangedCallBack(GDIObjects.Session.StrokeChanged)">
      <summary>
 Adds a listener callback to the stroke changed event 
 </summary>
 <param name="cb">The callback to invoke upon the stoke changing.</param></member>
    <member name="M:GDIObjects.Session.setFillChangedCallBack(GDIObjects.Session.FillChanged)">
      <summary>
 Adds a listener to the fill changed callback 
 </summary>
 <param name="cb">The callback to invoke upon fill changing</param></member>
    <member name="M:GDIObjects.Session.InvokeStrokeCallbacks">
      <summary>
 Invokes the strokechanged delegate. 
 </summary>
    </member>
    <member name="M:GDIObjects.Session.InvokeFillCallbacks">
      <summary>
 Invokes the fillchanged delegate. 
 </summary>
    </member>
    <member name="M:GDIObjects.Session.removeStrokeCallback(GDIObjects.Session.StrokeChanged)">
      <summary>
 Removes a listener from the stroke changed event 
 </summary>
 <param name="cb">The callback to remove</param></member>
    <member name="M:GDIObjects.Session.removeFillCallback(GDIObjects.Session.FillChanged)">
      <summary>
 Removes a listener from the fill changed delegate 
 </summary>
 <param name="cb">The callback to remove.</param></member>
    <member name="M:GDIObjects.Session.Fill_FillUpdated(System.Object,System.EventArgs)">
      <summary>
 Handler for the FillUpdated event.  Informs listeners of the fill update 
 </summary>
    </member>
    <member name="M:GDIObjects.Session.Stroke_StrokeUpdated(System.Object,System.EventArgs)">
      <summary>
 Handle for the Stroke updated event.  Informs listeners of the stroke update 
 </summary>
    </member>
    <member name="P:GDIObjects.Session.Tracing">
      <summary>
 Whether debug trace is enabled or not. 
 </summary>
 <value>A Boolean indicating if tracing is enabled or not.</value>
 <remarks>This value is controlled from the user interface project.</remarks></member>
    <member name="P:GDIObjects.Session.Settings">
      <summary>
 Gets various settings relevant to the entire GDIObject project. 
 </summary>
 <value>A settings object which contains various settings needed in the project.</value></member>
    <member name="P:GDIObjects.Session.DocumentManager">
      <summary>
 Returns a reference to the current document manager 
 </summary>
 <value>The DocumentManager used to provide context relevant to 
 the currently selected document</value></member>
    <member name="P:GDIObjects.Session.GraphicsManager">
      <summary>
 Gets a reference to the GraphicsManager. 
 </summary>
 <value>A GraphicsManager used to manipulate graphics within the GDIObjects project</value></member>
    <member name="P:GDIObjects.Session.Fill">
      <summary>
 Gets or sets the current GDIFill that new shapes should be filled with. 
 See the GDIFill virtual class for more information about fills. 
 </summary>
 <value>A GDIFill.</value>
 <remarks>Note that this invokes interested fill subscribers to notify that the 
 fill has been changed upon the Set 
 </remarks></member>
    <member name="P:GDIObjects.Session.Stroke">
      <summary>
 Gets or sets the current stroke that new shapes will be stroked with. 
 </summary>
 <value>The GDIStroke that new shapes should be stroke with</value>
 <remarks>Note that this invokes interested stoke event subscribers to notify that the 
 stroke has been changed upon the set. 
 </remarks></member>
    <member name="T:GDIObjects.Settings">
      <summary>
 Holds application wide settings relevant to the GDIObjects project 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._DrawSampleText">
      <summary>
 Whether to draw sample text in fields or not 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._DPIY">
      <summary>
 The Y DPI of the system.  Retrieved from a System.Drawing.Graphics object. 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._DPIX">
      <summary>
 The X DPI of the system.  Retrieved from a System.Drawing.Graphics object. 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._TextureAbsPath">
      <summary>
 Current Absolute path specified in the parent project's absolute texture path option 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._ImageRuntimeSource">
      <summary>
 Current image run time type specified in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._ImageAbsPath">
      <summary>
 Current absolute image path specified in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._ImageRelPath">
      <summary>
 Current relative image page specified in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._ConsolidateFills">
      <summary>
 Whether fill consolidation is currently enabled or not in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._ConsolidateStrokes">
      <summary>
 Whether stroke consolidation is currently enabled or not in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._Consolidatefonts">
      <summary>
 Whether font consolidation is currently enabled or not in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._ConsolidateStringFormats">
      <summary>
  Whether string format consolidation is currently enabled or 
  not in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._DragHandleColor">
      <summary>
 Color of drag handles defined in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._CurveColor">
      <summary>
 Curved handle color defined in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._GuideColor">
      <summary>
 Guide color defined in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._MemberScope">
      <summary>
 Default local field scope defined in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._TextureRuntimeSource">
      <summary>
 Default texture runtime source defined in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._TextureRelPath">
      <summary>
 Default texture relative path specified in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._UndoSteps">
      <summary>
 Default number of undo steps specified in the parent project's options 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._DrawTextFieldBorders">
      <summary>
 Whether to draw text field borders or not.  Specified in the parent project's options. 
 </summary>
    </member>
    <member name="F:GDIObjects.Settings._FieldScope">
      <summary>
 Default field scope for new GDIFields.  Defined in the parent project's options. 
 </summary>
    </member>
    <member name="M:GDIObjects.Settings.SetupDPI">
      <summary>
 Assigns the X and Y DPI  values 
 </summary>
    </member>
    <member name="P:GDIObjects.Settings.UndoSteps">
      <summary>
 The number of undo steps to record.  The default is 20. 
 </summary>
 <value>The number of undo steps to record in documents. 
 </value>
<remarks>
Due to the way documents consume history, this property doesn't take effect for 
document until they have been reopened. 
</remarks></member>
    <member name="P:GDIObjects.Settings.DrawTextFieldBorders">
      <summary>
 Whether to draw text item borders on GDIText and GDIField objects. 
 </summary>
 <value>A Boolean indicating whether to draw borders on fields or not. 
 </value></member>
    <member name="P:GDIObjects.Settings.FieldScope">
      <summary>
 Default scope for newly created GDIField objects. 
 </summary>
 <value>Default field scope for new GDIFields. 
 </value></member>
    <member name="P:GDIObjects.Settings.DPIX">
      <summary>
 X DPI from the graphics context 
 </summary>
 <value>A single containing the X DPI</value></member>
    <member name="P:GDIObjects.Settings.DPIY">
      <summary>
 Y DPI from the graphics context. 
 </summary>
 <value>A single containing the Y DPI</value></member>
    <member name="P:GDIObjects.Settings.MemberScope">
      <summary>
 Default scope for all GDIObjects aside from GDIFields. 
 </summary>
 <value>The default memberscope for new items. 
 </value></member>
    <member name="P:GDIObjects.Settings.TextureRuntimeSource">
      <summary>
 The runtime texture path for new textures (set by user options) 
 </summary>
 <value>The default runtime source for textures. 
 </value></member>
    <member name="P:GDIObjects.Settings.TextureRelPath">
      <summary>
 The relative texture path for new textures (set by user options) 
 </summary>
 <value>The default relative path for textures. 
 </value></member>
    <member name="P:GDIObjects.Settings.TextureAbsPath">
      <summary>
 The absolute texture path for new textures (set by user options) 
 </summary>
 <value>The default absolute path for textures. 
 </value></member>
    <member name="P:GDIObjects.Settings.ImageRuntimeSource">
      <summary>
 The default runtime type for placed images. 
 </summary>
 <value>An EnumLinkType indicating the default image source type. 
 </value></member>
    <member name="P:GDIObjects.Settings.ImageAbsPath">
      <summary>
 The default absolute path for placed images. 
 </summary>
 <value>The default absolute path to retrieve images from. 
 </value></member>
    <member name="P:GDIObjects.Settings.ImageRelPath">
      <summary>
 The default relative path for placed images. 
 </summary>
 <value>The default relative path to use for retrieving images in code. 
 </value></member>
    <member name="P:GDIObjects.Settings.ConsolidateFills">
      <summary>
 Whether by default to consolidate GDIFills. 
 </summary>
 <value>A Boolean indicating whether new GDIFills should be consolidated or not 
 </value></member>
    <member name="P:GDIObjects.Settings.ConsolidateStrokes">
      <summary>
 Whether by default to consolidate strokes. 
 </summary>
 <value>A Boolean indicating whether new GDIStrokes should be consolidated or not 
 </value></member>
    <member name="P:GDIObjects.Settings.ConsolidateFonts">
      <summary>
 Whether by default to consolidate fonts. 
 </summary>
 <value>A Boolean indicating whether new fonts should be consolidated or not 
 </value></member>
    <member name="P:GDIObjects.Settings.ConsolidateStringFormats">
      <summary>
 Whether by default to consolidate string format statements. 
 </summary>
 <value>A Boolean indicating whether new string formats should be consolidated or not 
 </value></member>
    <member name="P:GDIObjects.Settings.DragHandleColor">
      <summary>
 The color to draw drag handles in 
 </summary>
 <value>The color to render drag handles in</value></member>
    <member name="P:GDIObjects.Settings.CurveColor">
      <summary>
 The color to draw curvature points in 
 </summary>
 <value>The color to render curve points in</value></member>
    <member name="P:GDIObjects.Settings.GuideColor">
      <summary>
 The color to draw guides in. 
 </summary>
 <value>The color to render guides in.</value></member>
    <member name="P:GDIObjects.Settings.DrawSampleText">
      <summary>
 Whether to draw sample text into GDIFields.  Sample text does not emit as code 
 but serves to help understand if the text assigned at runtime will fit within the 
 GDIField 
 </summary>
 <value>Boolean indicating if sample text should be drawn.</value></member>
    <member name="T:GDIObjects.StrokeBrowser">
      <summary>
 Class used to render strokes inside the property grid.  For more information 
 on how the mechanics of this works, see the MSDN documentation on 
 the ExpandableObjectConvertor class. 
 </summary>
    </member>
    <member name="M:GDIObjects.StrokeBrowser.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
 Makes the property grid display "Stroke Properties" instead of "GDIStroke" 
 </summary>
 <param name="context">ITypeDescriptorContext</param>
 <param name="culture">current culture</param>
 <param name="value">Object being described.</param>
 <param name="destinationType">Expected output type of convertTo.  For the prop grid 
 this is always a string.</param>
 <returns>The string  "Stroke Properties"</returns></member>
    <member name="T:GDIObjects.GDIStroke">
      <summary>
 The GDIStroke class is responsible for providing a stroke to strokable GDIObjects.  This 
 maps to pen functionality in System.Drawing. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._Disposed">
      <summary>
 Whether this object has been disposed or not 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._Pen">
      <summary>
 A pen used to draw the GDIStroke as needed 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._Consolidate">
      <summary>
 Whether to consolidate this stroke with similar strokes during code export. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._Alignment">
      <summary>
 Alignment property of the stroke. 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._DashStyle">
      <summary>
 DashStyle of the stroke 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._Width">
      <summary>
 Width of the stroke 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._DashOffset">
      <summary>
 Dash offset of the stroke 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._StartCap">
      <summary>
 Start cap of the stroke 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._EndCap">
      <summary>
 End cap of the stroke 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._DashCap">
      <summary>
 Dash cap used on the stroke 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._LineJoin">
      <summary>
 Line join (see Drawing2D.LineJoin for more information about this property) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._MiterLimit">
      <summary>
 Miter limit of the stroke (see Drawing2D for information on miter limits) 
 </summary>
    </member>
    <member name="F:GDIObjects.GDIStroke._Color">
      <summary>
 The color to draw this stroke with. 
 </summary>
    </member>
    <member name="E:GDIObjects.GDIStroke.StrokeUpdated" />
    <member name="T:GDIObjects.GDIStroke.StrokeUpdatedEventHandler">
      <summary>
 Raised when a stroke is updated. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIStroke.#ctor(GDIObjects.GDIShape)">
      <summary>
 Constructor used for the "sessions" stroke - the stroke currently being used 
 to stroke new objects.  All other strokes created in GDI+ Architect use the other 
 constructor, which typically takes the stroke instantiated in the Session. 
 </summary>
 <param name="parent">Parent shape this stroke will render.  In the one time this 
 constructor is used, however, this value is Nothing (null) and 
 could be removed.</param></member>
    <member name="M:GDIObjects.GDIStroke.#ctor(GDIObjects.GDIStroke)">
      <summary>
 Constructs a stroke given another a parent shape and another stroke to base it on. 
 </summary>
 <param name="parent">The parent shape used to stroke objects</param>
 <param name="stroke">The stroke to base the new stroke off of.</param></member>
    <member name="M:GDIObjects.GDIStroke.getColorAssignment(System.Drawing.Color)">
      <summary>
 Returns a CodeDOM usable color expression.  This is used during the code generation 
 options. 
 </summary>
 <param name="val">The color to return a code representation of.</param>
 <returns>A code expression representing the color.</returns>
 <remarks>Notice that this code first attempts to use named colors if possible. 
 </remarks></member>
    <member name="M:GDIObjects.GDIStroke.emit(GDIObjects.GDIObject,System.CodeDom.CodeTypeMemberCollection,System.CodeDom.CodeMemberMethod,System.CodeDom.CodeStatementCollection,System.CodeDom.CodeMemberMethod,GDIObjects.ExportSettings,GDIObjects.ExportConsolidate)">
      <summary>
 Emits a stroke to code. 
 </summary>
 <param name="parent">The parent object this stroke belongs to.</param>
 <param name="Declarations">The declarations section of the CodeDOM.</param>
 <param name="InitGraphics">The GDI+ Architect's InitGraphics method.</param>
 <param name="RenderGDI">The GDI+ Architect RenderGDI method.</param>
 <param name="DisposeGDI">The GDI+ Architect's dispose method</param>
 <param name="ExportSettings">The currently selected export settings.</param>
 <param name="Consolidated">The set of consolidated objects.</param>
 <returns>The name of the stroke created in code.</returns></member>
    <member name="M:GDIObjects.GDIStroke.toXML(System.Xml.XmlDocument,System.Xml.XmlNode)">
      <summary>
 Converts a stroke to an SVG XML representation. 
 </summary>
 <param name="xmldoc">The SVG document containing the stroke.</param>
 <param name="parent">The parent node to append the stroke to.</param></member>
    <member name="M:GDIObjects.GDIStroke.Clone">
      <summary>
 Returns a copy of a stroke 
 </summary>
 <returns>A new copy of the current stroke.  A clone.</returns></member>
    <member name="M:GDIObjects.GDIStroke.op_Equality(GDIObjects.GDIStroke,GDIObjects.GDIStroke)">
      <summary>
 Determines if two strokes are equal (all properties the same). 
 </summary>
 <param name="stroke1">The first stroke to compare</param>
 <param name="stroke2">The second stroke to compare</param>
 <returns>A Boolean indicating if the two strokes are equal.</returns></member>
    <member name="P:GDIObjects.GDIStroke.Pen">
      <summary>
 A pen used to stroke objects that has all properties of the stroke assigned to 
 it. 
 </summary>
 <value>A pen that shapes can use to paint their edges with. 
 </value></member>
    <member name="P:GDIObjects.GDIStroke.Consolidate">
      <summary>
 Gets or sets whether to add this stroke to the consolidation set or not. 
 </summary>
 <value>A Boolean indicating whether to consolidate this stroke or not</value></member>
    <member name="P:GDIObjects.GDIStroke.DashCap">
      <summary>
 Gets or sets the stroke's dash cap 
 </summary>
 <value>A Drawing2D.DashCap</value></member>
    <member name="P:GDIObjects.GDIStroke.Startcap">
      <summary>
 Gets or sets the stroke's starting line cap 
 </summary>
 <value>A Drawing2D.LineCap</value></member>
    <member name="P:GDIObjects.GDIStroke.Endcap">
      <summary>
 Gets or sets a stroke's end cap 
 </summary>
 <value>A Drawing2D.EndCap</value></member>
    <member name="P:GDIObjects.GDIStroke.Alignment">
      <summary>
 Gets or sets the stroke's alignment 
 </summary>
 <value>A Drawing2D.Alignment</value></member>
    <member name="P:GDIObjects.GDIStroke.LineJoin">
      <summary>
 Gets or sets a stroke's LineJoin 
 </summary>
 <value>A Drawing2D.LineJoin</value></member>
    <member name="P:GDIObjects.GDIStroke.DashOffset">
      <summary>
 Gets or sets the dash offset of the stroke. 
 </summary>
 <value>A Single (float) of how much to offset the dash pattern by.</value></member>
    <member name="P:GDIObjects.GDIStroke.DashStyle">
      <summary>
 Gets or sets the dash style of the stroke. 
 </summary>
 <value>A Drawing2D.DashStyle</value></member>
    <member name="P:GDIObjects.GDIStroke.Width">
      <summary>
 Gets or sets the width of a stroke 
 </summary>
 <value>A single (float) representing the width of the stroke.</value></member>
    <member name="P:GDIObjects.GDIStroke.Color">
      <summary>
 Gets or sets the color used to fill a stroke 
 </summary>
 <value>A valid Drawing.Color</value></member>
    <member name="P:GDIObjects.GDIStroke.MiterLimit">
      <summary>
 Gets or sets the MiterLimit of a stroke (see MSDN for more details about MiterLimit) 
 </summary>
 <value>A Single (float) representing the miter limit.</value></member>
    <member name="M:GDIObjects.GDIStroke.UpdateStroke">
      <summary>
 Creates a new pen object as stroke properties are changed. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIStroke.Dispose">
      <summary>
 Disposes of the GDIStroke. 
 </summary>
    </member>
    <member name="M:GDIObjects.GDIStroke.Dispose(System.Boolean)">
      <summary>
 Disposes of the GDIStroke, specifically disposing of the _Pen. 
 </summary>
 <param name="disposing">Whether managed resources are being disposed or not.</param></member>
  </members>
</doc>